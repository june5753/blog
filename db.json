{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar1.gif","path":"images/avatar1.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1625828803886},{"_id":"source/_posts/10x程序员工作法 学习总结笔记.md","hash":"0a31c8fde25734aee1cbcb84c57cf7e4c5dff1c3","modified":1625829124364},{"_id":"source/_posts/test.md","hash":"d70231aac61de185e37855474ec39fe45ed6762b","modified":1625829527987},{"_id":"source/_posts/让你最快速地改善代码质量的20条编程规范.md","hash":"7763bb5c6b3327bb623ace7a546bba714eaadee1","modified":1625829662255},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1625819813014},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1625819813014},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1625819813015},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1625819813019},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1625819813019},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1625819813019},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1625819813020},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1625819813020},{"_id":"themes/next/_config.yml","hash":"8212d5568ae719410fde9da8b5ef6ca87e4e2103","modified":1625827516999},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1625819813021},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1625819813025},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1625819813050},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1625819813016},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1625819813016},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1625819813017},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1625819813017},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1625819813017},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1625819813018},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1625819813018},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1625819813018},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1625819813018},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1625819813018},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1625819813019},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1625819813021},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1625819813021},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1625819813022},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1625819813022},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1625819813022},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1625819813022},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1625819813022},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1625819813022},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1625819813023},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1625819813026},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1625819813026},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1625819813026},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1625819813026},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1625819813026},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1625819813026},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1625819813026},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1625819813027},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1625819813027},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1625819813027},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1625819813027},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1625819813027},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1625819813028},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1625819813028},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1625819813028},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1625819813028},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1625819813028},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1625819813028},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1625819813029},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1625819813029},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1625819813029},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1625819813029},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1625819813029},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1625819813047},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1625819813048},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1625819813048},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1625819813049},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1625819813049},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1625819813050},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1625819813061},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1625819813016},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1625819813016},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1625819813017},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1625819813017},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1625819813023},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1625819813023},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1625819813023},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1625819813023},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1625819813024},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1625819813024},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1625819813024},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1625819813024},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1625819813024},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1625819813025},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1625819813025},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1625819813025},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1625819813025},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1625819813029},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1625819813030},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1625819813030},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1625819813030},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1625819813030},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1625819813032},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1625819813033},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1625819813035},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1625819813035},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1625819813035},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1625819813035},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1625819813036},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1625819813036},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1625819813038},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1625819813043},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1625819813045},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1625819813045},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1625819813051},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1625819813059},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1625819813060},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1625819813060},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1625819813060},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1625819813060},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1625819813061},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1625819813061},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1625819813061},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1625819813061},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1625819813061},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1625819813062},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1625819813062},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1625819813063},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1625819813063},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1625819813063},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1625819813063},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1625819813064},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1625819813064},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1625819813064},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1625819813065},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1625819813081},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1625819813086},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1625827376241},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1625819813086},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1625819813087},{"_id":"themes/next/source/images/avatar1.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1625819813087},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1625819813087},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1625819813088},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1625819813090},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1625819813090},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1625819813090},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1625819813090},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1625819813091},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1625819813091},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1625819813091},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1625819813093},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1625819813093},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1625819813093},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1625819813094},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1625819813094},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1625819813095},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1625819813097},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1625819813099},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1625819813030},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1625819813031},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1625819813031},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1625819813031},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1625819813031},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1625819813032},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1625819813032},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1625819813033},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1625819813033},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1625819813033},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1625819813033},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1625819813033},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1625819813034},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1625819813034},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1625819813034},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1625819813034},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1625819813034},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1625819813035},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1625819813035},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1625819813036},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1625819813036},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1625819813036},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1625819813036},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1625819813037},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1625819813037},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1625819813037},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1625819813037},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1625819813040},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1625819813040},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1625819813041},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1625819813042},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1625819813042},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1625819813043},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1625819813043},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1625819813043},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1625819813045},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1625819813045},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1625819813045},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1625819813045},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1625819813046},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1625819813046},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1625819813046},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1625819813046},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1625819813046},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1625819813046},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1625819813047},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1625819813047},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1625819813047},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1625819813051},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1625819813052},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1625819813052},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1625819813052},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1625819813053},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1625819813057},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1625819813058},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1625819813058},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1625819813058},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1625819813058},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1625819813059},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1625819813085},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1625819813085},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1625819813085},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1625819813085},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1625819813085},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1625819813096},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1625819813097},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1625819813105},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1625819813105},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1625819813065},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1625819813066},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1625819813066},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1625819813071},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1625819813074},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1625819813075},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1625819813078},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1625819813078},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1625819813078},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1625819813079},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1625819813079},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1625819813079},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1625819813080},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1625819813081},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1625819813082},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1625819813082},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1625819813082},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1625819813082},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1625819813082},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1625819813082},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1625819813083},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1625819813083},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1625819813083},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1625819813083},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1625819813083},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1625819813083},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1625819813084},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1625819813084},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1625819813084},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1625819813084},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1625819813084},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1625819813084},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1625819813102},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1625819813104},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1625819813066},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1625819813067},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1625819813067},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1625819813066},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1625819813067},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1625819813068},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1625819813068},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1625819813068},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1625819813068},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1625819813069},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1625819813068},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1625819813069},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1625819813069},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1625819813069},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1625819813070},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1625819813070},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1625819813070},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1625819813070},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1625819813071},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1625819813071},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1625819813071},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1625819813071},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1625819813072},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1625819813072},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1625819813072},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1625819813072},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1625819813073},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1625819813073},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1625819813073},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1625819813074},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1625819813074},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1625819813075},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1625819813075},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1625819813075},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1625819813075},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1625819813076},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1625819813076},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1625819813076},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1625819813076},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1625819813076},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1625819813077},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1625819813078},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1625819813079},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1625819813079},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1625819813079},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1625819813080},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1625819813080},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1625819813080},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1625819813080},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1625819813081},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1625819813081},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1625819813081},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1625819813103},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1625819813104},{"_id":"themes/next/source/images/avatar.png","hash":"65907276481749a6f3431ea70c57383002a31da9","modified":1625827343543},{"_id":"public/2021/07/09/test/index.html","hash":"2f4c2a37e530004144f3c8a0f79a1b9f8e7703e4","modified":1626234003066},{"_id":"public/archives/index.html","hash":"9ba6115a84be3ff042fd150a2557b169516246af","modified":1626234003066},{"_id":"public/archives/2021/index.html","hash":"1e2eecdb180ebbb42ca8f296ac23bc9bc92a176e","modified":1626234003066},{"_id":"public/archives/2021/07/index.html","hash":"d70737620e95bfec80966721f66f2d57f736f876","modified":1626234003066},{"_id":"public/categories/思维方式/index.html","hash":"1eae320829c439fe16db4886374cfdbd674db10e","modified":1626234003066},{"_id":"public/categories/编程规范/index.html","hash":"bb7ffc70e4d9b31e44adbb6132b22d9acd6f4514","modified":1626234003066},{"_id":"public/tags/高效方法/index.html","hash":"7e2c0dd6ff436f1ffcdd3da2baabe5022b318395","modified":1626234003066},{"_id":"public/tags/10x-程序员/index.html","hash":"06941c3f025b4e80379754eb504787f9c9885bbc","modified":1626234003066},{"_id":"public/tags/编程规范/index.html","hash":"d5bc28507789c7cca9bb21e0a445b51b33a261de","modified":1626234003066},{"_id":"public/tags/设计模式之美/index.html","hash":"8300d6cad31f6f38e26894fd2254d3769f69f4e3","modified":1626234003066},{"_id":"public/2021/07/09/让你最快速地改善代码质量的20条编程规范/index.html","hash":"28ea7580582d2b0ed9a9afb451c800b12866bdd3","modified":1626234003066},{"_id":"public/2021/07/09/10x程序员工作法 学习总结笔记/index.html","hash":"e3ddc4a03dfc56a612894921a703e9f55d9f91c7","modified":1626234003066},{"_id":"public/index.html","hash":"66764f803b65dcff2dcee9e7bcaa739885413930","modified":1626234003066},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626234003066},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1626234003066},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626234003066},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626234003066},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626234003066},{"_id":"public/images/avatar1.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1626234003066},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626234003066},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626234003066},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626234003066},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626234003066},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1626234003066},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1626234003066},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1626234003066},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1626234003066},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1626234003066},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1626234003066},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1626234003066},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1626234003066},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1626234003066},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1626234003066},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1626234003066},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1626234003066},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626234003066},{"_id":"public/css/main.css","hash":"ef282b547bb1b47556c14372475ae7bd00ddf635","modified":1626234003066},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1626234003066},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626234003066},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1626234003066},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1626234003066},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1626234003066},{"_id":"public/images/avatar.png","hash":"65907276481749a6f3431ea70c57383002a31da9","modified":1626234003066}],"Category":[{"name":"思维方式","_id":"ckr2xqjpy0002p61o8wlg4e35"},{"name":"编程规范","_id":"ckr2xqjq10005p61odfy47wat"}],"Data":[],"Page":[],"Post":[{"title":"10x 程序员工作法 学习总结笔记","date":"2021-07-09T03:41:10.000Z","_content":"\n# 前言\n\n> 本文总结了做为一个程序员有哪些高效的工作方式、思考方式和落实起来有用的方式和实操，请选择使用。\n\n\n\n软件行业的名著《人月神话》里提到两个重要概念：本质复杂度（Essential Complexity）和偶然复杂度（Accident Complexity）。简单来说，本质复杂度就是解决一个问题时，无论如何都要做的事，而偶然复杂度是因为做事方法不当，而导致要多做的事。\n\n所以做事需要讲究方法，各位各业都有不同的做事方法，本文总结了10x程序员的做事法则。\n\n\n\n本文笔记 根据 来自极客时间专栏上资深架构师郑晔的《10x程序员工作法》中的学习部分笔记、和其他相关资料加上个人思考的而形成的总结笔记。\n\n\n\n## 忙碌原因\n\n- 本质复杂度(Essential Complexity)\n\n    问题本身复杂\n\n- 偶然复杂度(Accident Complexity)\n\n    选用方法不当, 导致复杂度上升\n\n## 客观事实\n\n大部分程序员忙碌解决的问题，都不是程序问题，而是由偶然复杂度导致的问题\n\n## 解决方案\n\n减少偶然复杂度引发的问题, 让软件开发工作有序、高效地进行; 优秀程序员的开发效率是普通程序员的 10 倍。\n\n遵循以下原则有利于减少偶然复杂度\n\n- 以始为终\n- 任务分解\n- 沟通反馈\n- 自动化\n\n# 10x工作法原则\n\n如何让努力不白费？\n\n## 以终为始：遇到事情，倒着想\n\n网上流传着一个帖子，亚马逊 CTO 介绍亚马逊是如何开发一项产品的，简单来说，他们采用向后工作的方法，开发一项产品的顺序为：\n\n- 写新闻稿；\n\n- 写 FAQ （常见问题解答）；\n\n- 写用户文档；\n\n- 写代码。\n\n   \n\n任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental/First Creation），然后才是付诸实践，也就是实际的或第二次创造（Physical/Second Creation）。我们应该在第一次创造上多下功夫，统一集体想象，让目标更明确。\n\n\n\n“以终为始”的思维可以帮助我们更好地规划我们手头任务，也可以帮助我们发现过程中的问题。\n\n\n\n“ 以终为始”也是《高效能人士的七个习惯》中提到的一个重要习惯。这本书值得一读。\n\n\n\n史蒂芬.柯维说绝对不要以任何片面的事情为中心，应该要以原则为中心。“一个以原则为中心的人，对自己的选择胸有成竹，无论结果怎么都能专注于此，并且心安理得，内心没有羁绊。以原则为生活中心的人，总是见解不凡，思想与行为也独具一格，而坚实稳定的内在核心赐予他们高度的安全感，人生方向，智慧与力量。会让他们度过积极与充实的一生。”\n所以找到你人生的原则，设定一个目标，以终为始。\n\n\n\n## 任务分解\n\n- 任务分解：按部就班的前提\n\n- 软件开发的任务分解：\n  - 一个大问题，我们都很难给出答案，但回答小问题却是我们擅长的\n  - 任务分解的粒度: 可执行。不同的可执行定义差别在于，你是否能清楚地知道这个问题该如何解决。\n- 大师级程序员工作的秘笈\n  - 将任务拆小，越小越好\n  - 将大问题拆解成能够解决的小问题\n\n- 测试也是程序员的一部分\n\n  - 对于每个程序员来说，只有在开发阶段把代码和测试都写好，才有资格说，自己交付的是高质量的代码\n\n  - 测试驱动开发(TDD)，一种设计挑战\n\n    \n\n小结：面对看上去无法解决的问题，需要学会分解问题，不然无从下手。\n\n## 大师级程序员的工作秘笈\n\n大师级程序员每当遇到一件要做的事，把他分解成几个小任务，记录在一个清单上，然后才是动手写测试、写代码、重构这样一个小循环。等一个循环完成了，他会划掉已经做完的任务，开始下一个。一旦在解决问题的过程中遇到任务新问题，他会把要解决的问题记录在清单上，保证问题不会丢失，然后，继续回到自己正在处理的任务上。当他把一个个任务完成的时候，问题就解决完了。每个任务完成时，代码都是可以提交的。看上去简单，但是很多程序员都做不到。\n\n只有把任务分解到很小，才可能做到小步提交。而把任务分解到很小，其实证明你已经想清楚了。而大多数程序员之所以开发效率低，很多时候是没想清楚就动手了。\n\n任务分解是个好习惯，但是想要掌握它，大量的练习是必须的。\n\n作者能保持连续在github上提交代码1000天，还是挺牛逼的，这个连续提交的基础，就是我自己在练习任务分解时，不断的尝试把一件事拆细，这样，我每天都至少能保证完成一小步。当然，如果有时间了，我也会多写一点。\n\n经过这种练习之后，任务分解也就成了我的本能，不再局限于写程序上。我遇到任何需要解决的问题，脑子里的第一反应一定是，它可以怎么一步一步的完成，确定好分解之后，解决问题就是一步步做了。\n\n\n## DoD的价值：在做任何事情之前，先定义完成的标准\n\nDoD（Definition Of Done，完成的定义），这个概念本身并不复杂，它就是告诉我们怎样算完成了，尽量减少因为理解偏差造成的各种浪费。\n\n比如一次开发完成，表示：\n\n- 开发人员编写好功能代码\n- 编写好单元测试代码\n- 编写好集成测试代码\n- 测试可以通过\n- 代码通过了代码风格检查、测试覆盖率检查。\n\n一旦 DoD 确定好了，谁该做什么事、该做到什么程度就一目了然了。\n\n## 如何更好得使用 DoD呢？\n\n- DoD 是一个清单，由一个个检查项组成的，用来检查工作完成情况。\n\n- DoD 的检查项应该是实际可检查的，比如代码写好了，可以展示代码，单元测试代码写好了，可以进行现场测试。\n- DoD 是团队成员间彼此汇报的一种机制。有了 DoD，做事只有两种状态，即 “做完” 和 “没做完”。\n\n## 在做任何需求或任务之前，先定好验收标准。\n\n我们都知道，需求是软件开发的一个重要组成部分，但你可能没有仔细想过，不同的需求描述方式，可能会影响程序员对需求的理解。\n\n很多公司的软件开发模式是基于功能列表的，这个列表 “ 规定 ” 了程序员要做的功能，这种方式把一个完整的需求拆成了碎片。不到最后一刻，大部分人并没有一个完整的概念，这也就会在最后关头遇到很多意料之外的问题，结果必然是手忙脚乱。\n\n那么，这个时候验收标准变得极为重要，验收标准不仅仅描述了正常流程，也会关注到异常流程的处理。它给出了这个需求最基本的测试用例，保证了开发人员完成需求最基本的质量。一旦定义好验收标准，大量的扯皮工作就随之烟消云散了。 \n\n## 尽早提交代码去集成\n\n持续集成指的是，频繁地将代码集成到主干。\n\n它的好处主要有两个。\n\n快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。\n防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。\n持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量\n\nMartin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”\n\n \n\n## 在没弄清楚之前，需求都不做\n\n精益创业：这个名字并不是指导人们创业挣大钱的方法论。它要解决的是面向不确定性创造新事物。\n\n精益创业中的 “精益”这个词，让人们开始理解价值创造和浪费之间的关系。创造价值是每个人都能理解的，但减少浪费是很多人忽略的。所以，精益创业就是在尽可能少浪费的前提下，面向不确定性创造新事物。\n\n既然是面向不确定性创造新事物，我们唯一能做的就是 “ 试 ”。也就是说，当你有了一个新的想法时，就把想法开发成产品投入市场，然后，手机数据获取反馈，看看前面的想法是否靠谱。好想法继续加强，不靠谱的想法丢掉。\n\n既然是试，也不确定想法的有效性，最好的办法就是以最低的成本试。许多软件团队都会陷入一个非常典型的误区，不管什么需求都想做出来看看，殊不知，把软件完整做出来是最大的浪费。\n\n精益创业提供给我们的是一个做产品的思考框架。当产品经理要做一个新产品或是产品的新特性，我们就可以用精益创业的概念检验一下产品经理是否想清楚了。比如，你要做个产品特性，你要验证的东西是什么呢？要验证的目标是否有数据可以度量呢？要解决的这个问题是不是当前最重要的事情？稳了这些，我们能更好地确定产品经理提出的需求确实是经过严格思考的。\n\n\n\n## 接到需求， 要先做哪些事情\n\n需求的拆分:用户故事\n\n- 问题\n\n  基本上，闯入你脑海的需求描述是主题（epic），在敏捷开发中，有人称之为主用户故事（master story)\n绝大多数问题都是由于分解的粒度太大造成的，少有因为粒度太小而出问题的\n用户故事，它将是我们这里讨论需求管理的基本单位。\n\n- 需求要分解\n用户故事原则：\n\n1、Independent，独立的\n2、Negotiable，可协商的\n3、Valuable，有价值的\n4、Estimatable，可估算的\n5、Small，小\n6、Testable，可测试的\n\n需求的估算:\n\n估算的结果是相对的，不是绝对精确的，我们不必像做科研一样，只要给出一个相对估算就好，一般来说，估算的过程也是大家加深对需求理解的过程。\n\n优先级管理：做最重要的事情\n\n需求分解之后，最重要的是，排列需求的优先级。优先级的排列方式有很多，我们可以借鉴时间管理的方法，把事情按照重要和紧急的维度进行划分，得到了四个象限。我们要尽可能把精力放在重要的事情上，而不是把紧急的事情当成优先级排序的方式。\n\n\n\n确定事情的重要程度, 一种方式就是找回丢失的上下文，如果无法判断好的办法, 那就引入外部更大的上下文\n\n**小结**：需求从产品、开发、测试需要对齐，确保理解一致，按一定的敏捷开发流程来不段迭代开发流程，也是高效的工作法则之一。\n\n\n## 为什么说做事情之前先要进行推演\n\n- 沙盘推演, 从军事指挥室里学来的大学问\n- 即便已经确定了自己的工作目标，我们依然要在具体动手之前，把实施步骤推演一番，完成一次头脑中的创造，也就是第一次创造或智力上的创造。这种思想在军事上称之为沙盘推演，在很多领域都有广泛地应用\n- 通向结果的路径才是更重要的\n- 在动手做一件事之前，先推演一番。\n\n\n\n## 解决了很多技术问题，为什么依然在\"坑\"里？\n\n技术是一把利刃，程序员相信技术可以改变世界，但并不是所有问题都要用技术解决。花大力气去解决一个可能并不是问题的问题，常常是很多程序员的盲区。\n\n- 更大范围内寻找\"终\"\n\n- 程序员总喜欢用技术去解决一切问题，但很多令人寝食难安的问题其实根本不是问题。之所以找不出更简单的解决方案，很多时候原因在于程序员被自己的思考局限住了。\n\n- 不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果\n\n- 角色的差异：\n  - 不同角色工作上真正的差异是上下文的不同\n  - 虽然写的代码都一样，但你看到的是树木，人家看到的是森林，他更能从全局思考\n  - 我并不是靠技术能力解决了问题，而是凭借对需求的理解把这个问题绕过去了\n  - 而能想到问这样的问题，前提就是要跳出程序员角色思维，扩大自己工作的上下文\n  - 当你对软件开发的全生命周期都有了认识之后，你看到的就不再是一个点了，而是一条线\n\n- 工作的上下文不同，看到的维度差异很大\n  - 单一维度的思考，在多维度思考者的眼里几乎就是漏洞百出的\n  - 扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上。\n\n小结：遇到问题，多沟通，多请教，学会转换视角，转换思维，实现对问题的降维打击，以解决问题。\n\n## 入职新公司, 如何快速进入工作状态？\n\n步骤：\n\n- 了解业务\n\n- 技术\n\n  - 技术栈\n\n  - 业务架构\n\n  - 内外依赖\n\n\n- 团队运作\n\n  需求, 产品，向谁汇报\n\n- 内部活动\n\n  站会、 回顾会议、周会、代码评审、内部分享等。\n\n- 使用“行话”。在交流的过程中，学习一点”行话“。\n\n  这会让人觉得你懂行，让你很快得到信任，尽早融入团队\n\n- 找到关键点，迅速下手\n\n- 由大到小， 由内而外\n\n## 如何管理你的上级？\n\n- 领导要求的，无力反驳怎么办？\n\n我们要敢于管理上级。\n\n第一，管理上级的预期。这个过程，相当于我把自己看到的问题暴露给上级，让他选择。\n第二，帮助上级丰富知识。\n第三，说出你的想法。这其实就是我们熟悉的一个最简单的道理：会哭的孩子有奶吃。\n\n\n\n- 产品经理总拿老板说事，怎么办？\n\n实际上，老板要求的是方向，不是产品特性。大老板不会安排那么细的细节。所以，一个产品经理该做的事就是把老板给的方向，变成一个个可以实现的产品特性，他要分析其中的合理与不合理。\n\n不合理的部分应该是他和老板去沟通的，而不是让开发团队来实现。\n\n\n\n- 别人能做的，我们也要做\n\n第一，竞争对手有的产品，我们也要有。\n\n“抄”不是问题，问题是无脑地抄。\n\n所以，如果你的产品经理只想无脑抄袭，本质上，他就是在偷懒，没干好他该干的活。\n\n第二：人家能做到，说明技术上是可行的。\n\n要做什么是需求，怎么做是技术。与产品经理要确认的是，这个需求是不是合理，该不该做。技术上能否实现，这是开发团队要考虑的事情，并不是产品经理说事的理由。\n\n\n\n# 刻意练习\n\n最牛B的编码套路：\n\nSteve Yegge 在“[Practicing Programming](https://sites.google.com/site/steveyegge2/practicing-programming)”（练习编程）提到：\n\n>与你所相信的恰恰相反，单纯地每天埋头于工作并不能算是真正意义上的锻炼——参加会议并不能锻炼你的人际交往能力；回复邮件并不能提高你的打字水平。你必须定期留出时间，集中锻炼，这样才能把事情做得更好。\n\n\n\n每天都开车去上班，但我的驾驶水平远远不如专业车手；类似的情况，天天编程可能并不足以使你成为一名专业的程序员。那么，什么才能把一个普通人变成一名专业车手或者专业程序员呢？你需要锻炼什么呢？\n\n答案就在《科学美国人》的一篇名为“The Expert Mind”（专家思维）的文章里：\n\n>爱立信提出，重要的并不是经验本身，而是“努力的学习”，也就是要不断地挑战自身能力之外的东西。一些狂热的爱好者花费了大量的时间去下棋、打高尔夫球或者玩乐器，但他们可能始终停留在业余水平上，而一个训练有素的学生却可以在相对较短的时间里超越他们，原因就在这里。值得注意的是，在提高水平方面，花费在下棋上的大量时间（即使参加各种比赛）似乎还是比不过专门的训练来得更为有效。训练的主要价值在于发现弱点，并有针对性地进行提高。\n\n\n\n“努力的学习”意味着，要常常去处理那些刚好在你能力极限上的问题，也就是那些对你来说有很大可能失败的事情。如果不经历一些失败的话，你可能就不会成长。你必须不断地挑战自我，超越自己的极限。\n\n那样的挑战有时会在工作中碰到，但也未必。将锻炼从职业工作中分离出来，这在编程领域常被人称为“编码套路”（Code Kata）。\n\n\n\nCode Kata的概念是由David Thomas提出的，他是《程序员修炼之道：从小工到专家》的作者之一。这个概念主要指的是:\n>针对某一种特定技术或技能进行重复性的练习，从而将其熟练掌握。——译者注\n\n\n\n还有一些实践经验不在此列出，最后作者总结了最精炼的编程套路：\n\n第一：写博客 \n\n第二：积极参与著名的开源项目\n\n\n\n小结： 输出倒逼输入，是最好的学习方式之一；“Talk is cheap ,show me the code”. 刻意练习。\n\n\n\n# 精进书单\n\n《程序员修炼之道：从小工到专家》\n\n《高效能人士的七个习惯》\n\n《好好学习》\n\n《好好思考》\n\n《刻意练习》\n\n……\n\n\n\n# 总结\n\n学会学习、学会思考、学习用好工具, 学会复盘，学会自我迭代，学会精进，学会掌握底层思考利器。\n\n如里觉得总结对你有一点用的话，请给一个赞哦。\n\n参考：\n\n[如何成为一位技术专家](http://oenhan.com/technical-experts)\n\n[最牛B的编码套路](https://blog.csdn.net/happydeer/article/details/17023229)","source":"_posts/10x程序员工作法 学习总结笔记.md","raw":"---\ntitle: 10x 程序员工作法 学习总结笔记\ndate: 2021-07-09 11:41:10\ntags:\n- 高效方法        \n- 10x 程序员\ncategories: 思维方式\n---\n\n# 前言\n\n> 本文总结了做为一个程序员有哪些高效的工作方式、思考方式和落实起来有用的方式和实操，请选择使用。\n\n\n\n软件行业的名著《人月神话》里提到两个重要概念：本质复杂度（Essential Complexity）和偶然复杂度（Accident Complexity）。简单来说，本质复杂度就是解决一个问题时，无论如何都要做的事，而偶然复杂度是因为做事方法不当，而导致要多做的事。\n\n所以做事需要讲究方法，各位各业都有不同的做事方法，本文总结了10x程序员的做事法则。\n\n\n\n本文笔记 根据 来自极客时间专栏上资深架构师郑晔的《10x程序员工作法》中的学习部分笔记、和其他相关资料加上个人思考的而形成的总结笔记。\n\n\n\n## 忙碌原因\n\n- 本质复杂度(Essential Complexity)\n\n    问题本身复杂\n\n- 偶然复杂度(Accident Complexity)\n\n    选用方法不当, 导致复杂度上升\n\n## 客观事实\n\n大部分程序员忙碌解决的问题，都不是程序问题，而是由偶然复杂度导致的问题\n\n## 解决方案\n\n减少偶然复杂度引发的问题, 让软件开发工作有序、高效地进行; 优秀程序员的开发效率是普通程序员的 10 倍。\n\n遵循以下原则有利于减少偶然复杂度\n\n- 以始为终\n- 任务分解\n- 沟通反馈\n- 自动化\n\n# 10x工作法原则\n\n如何让努力不白费？\n\n## 以终为始：遇到事情，倒着想\n\n网上流传着一个帖子，亚马逊 CTO 介绍亚马逊是如何开发一项产品的，简单来说，他们采用向后工作的方法，开发一项产品的顺序为：\n\n- 写新闻稿；\n\n- 写 FAQ （常见问题解答）；\n\n- 写用户文档；\n\n- 写代码。\n\n   \n\n任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental/First Creation），然后才是付诸实践，也就是实际的或第二次创造（Physical/Second Creation）。我们应该在第一次创造上多下功夫，统一集体想象，让目标更明确。\n\n\n\n“以终为始”的思维可以帮助我们更好地规划我们手头任务，也可以帮助我们发现过程中的问题。\n\n\n\n“ 以终为始”也是《高效能人士的七个习惯》中提到的一个重要习惯。这本书值得一读。\n\n\n\n史蒂芬.柯维说绝对不要以任何片面的事情为中心，应该要以原则为中心。“一个以原则为中心的人，对自己的选择胸有成竹，无论结果怎么都能专注于此，并且心安理得，内心没有羁绊。以原则为生活中心的人，总是见解不凡，思想与行为也独具一格，而坚实稳定的内在核心赐予他们高度的安全感，人生方向，智慧与力量。会让他们度过积极与充实的一生。”\n所以找到你人生的原则，设定一个目标，以终为始。\n\n\n\n## 任务分解\n\n- 任务分解：按部就班的前提\n\n- 软件开发的任务分解：\n  - 一个大问题，我们都很难给出答案，但回答小问题却是我们擅长的\n  - 任务分解的粒度: 可执行。不同的可执行定义差别在于，你是否能清楚地知道这个问题该如何解决。\n- 大师级程序员工作的秘笈\n  - 将任务拆小，越小越好\n  - 将大问题拆解成能够解决的小问题\n\n- 测试也是程序员的一部分\n\n  - 对于每个程序员来说，只有在开发阶段把代码和测试都写好，才有资格说，自己交付的是高质量的代码\n\n  - 测试驱动开发(TDD)，一种设计挑战\n\n    \n\n小结：面对看上去无法解决的问题，需要学会分解问题，不然无从下手。\n\n## 大师级程序员的工作秘笈\n\n大师级程序员每当遇到一件要做的事，把他分解成几个小任务，记录在一个清单上，然后才是动手写测试、写代码、重构这样一个小循环。等一个循环完成了，他会划掉已经做完的任务，开始下一个。一旦在解决问题的过程中遇到任务新问题，他会把要解决的问题记录在清单上，保证问题不会丢失，然后，继续回到自己正在处理的任务上。当他把一个个任务完成的时候，问题就解决完了。每个任务完成时，代码都是可以提交的。看上去简单，但是很多程序员都做不到。\n\n只有把任务分解到很小，才可能做到小步提交。而把任务分解到很小，其实证明你已经想清楚了。而大多数程序员之所以开发效率低，很多时候是没想清楚就动手了。\n\n任务分解是个好习惯，但是想要掌握它，大量的练习是必须的。\n\n作者能保持连续在github上提交代码1000天，还是挺牛逼的，这个连续提交的基础，就是我自己在练习任务分解时，不断的尝试把一件事拆细，这样，我每天都至少能保证完成一小步。当然，如果有时间了，我也会多写一点。\n\n经过这种练习之后，任务分解也就成了我的本能，不再局限于写程序上。我遇到任何需要解决的问题，脑子里的第一反应一定是，它可以怎么一步一步的完成，确定好分解之后，解决问题就是一步步做了。\n\n\n## DoD的价值：在做任何事情之前，先定义完成的标准\n\nDoD（Definition Of Done，完成的定义），这个概念本身并不复杂，它就是告诉我们怎样算完成了，尽量减少因为理解偏差造成的各种浪费。\n\n比如一次开发完成，表示：\n\n- 开发人员编写好功能代码\n- 编写好单元测试代码\n- 编写好集成测试代码\n- 测试可以通过\n- 代码通过了代码风格检查、测试覆盖率检查。\n\n一旦 DoD 确定好了，谁该做什么事、该做到什么程度就一目了然了。\n\n## 如何更好得使用 DoD呢？\n\n- DoD 是一个清单，由一个个检查项组成的，用来检查工作完成情况。\n\n- DoD 的检查项应该是实际可检查的，比如代码写好了，可以展示代码，单元测试代码写好了，可以进行现场测试。\n- DoD 是团队成员间彼此汇报的一种机制。有了 DoD，做事只有两种状态，即 “做完” 和 “没做完”。\n\n## 在做任何需求或任务之前，先定好验收标准。\n\n我们都知道，需求是软件开发的一个重要组成部分，但你可能没有仔细想过，不同的需求描述方式，可能会影响程序员对需求的理解。\n\n很多公司的软件开发模式是基于功能列表的，这个列表 “ 规定 ” 了程序员要做的功能，这种方式把一个完整的需求拆成了碎片。不到最后一刻，大部分人并没有一个完整的概念，这也就会在最后关头遇到很多意料之外的问题，结果必然是手忙脚乱。\n\n那么，这个时候验收标准变得极为重要，验收标准不仅仅描述了正常流程，也会关注到异常流程的处理。它给出了这个需求最基本的测试用例，保证了开发人员完成需求最基本的质量。一旦定义好验收标准，大量的扯皮工作就随之烟消云散了。 \n\n## 尽早提交代码去集成\n\n持续集成指的是，频繁地将代码集成到主干。\n\n它的好处主要有两个。\n\n快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。\n防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。\n持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量\n\nMartin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”\n\n \n\n## 在没弄清楚之前，需求都不做\n\n精益创业：这个名字并不是指导人们创业挣大钱的方法论。它要解决的是面向不确定性创造新事物。\n\n精益创业中的 “精益”这个词，让人们开始理解价值创造和浪费之间的关系。创造价值是每个人都能理解的，但减少浪费是很多人忽略的。所以，精益创业就是在尽可能少浪费的前提下，面向不确定性创造新事物。\n\n既然是面向不确定性创造新事物，我们唯一能做的就是 “ 试 ”。也就是说，当你有了一个新的想法时，就把想法开发成产品投入市场，然后，手机数据获取反馈，看看前面的想法是否靠谱。好想法继续加强，不靠谱的想法丢掉。\n\n既然是试，也不确定想法的有效性，最好的办法就是以最低的成本试。许多软件团队都会陷入一个非常典型的误区，不管什么需求都想做出来看看，殊不知，把软件完整做出来是最大的浪费。\n\n精益创业提供给我们的是一个做产品的思考框架。当产品经理要做一个新产品或是产品的新特性，我们就可以用精益创业的概念检验一下产品经理是否想清楚了。比如，你要做个产品特性，你要验证的东西是什么呢？要验证的目标是否有数据可以度量呢？要解决的这个问题是不是当前最重要的事情？稳了这些，我们能更好地确定产品经理提出的需求确实是经过严格思考的。\n\n\n\n## 接到需求， 要先做哪些事情\n\n需求的拆分:用户故事\n\n- 问题\n\n  基本上，闯入你脑海的需求描述是主题（epic），在敏捷开发中，有人称之为主用户故事（master story)\n绝大多数问题都是由于分解的粒度太大造成的，少有因为粒度太小而出问题的\n用户故事，它将是我们这里讨论需求管理的基本单位。\n\n- 需求要分解\n用户故事原则：\n\n1、Independent，独立的\n2、Negotiable，可协商的\n3、Valuable，有价值的\n4、Estimatable，可估算的\n5、Small，小\n6、Testable，可测试的\n\n需求的估算:\n\n估算的结果是相对的，不是绝对精确的，我们不必像做科研一样，只要给出一个相对估算就好，一般来说，估算的过程也是大家加深对需求理解的过程。\n\n优先级管理：做最重要的事情\n\n需求分解之后，最重要的是，排列需求的优先级。优先级的排列方式有很多，我们可以借鉴时间管理的方法，把事情按照重要和紧急的维度进行划分，得到了四个象限。我们要尽可能把精力放在重要的事情上，而不是把紧急的事情当成优先级排序的方式。\n\n\n\n确定事情的重要程度, 一种方式就是找回丢失的上下文，如果无法判断好的办法, 那就引入外部更大的上下文\n\n**小结**：需求从产品、开发、测试需要对齐，确保理解一致，按一定的敏捷开发流程来不段迭代开发流程，也是高效的工作法则之一。\n\n\n## 为什么说做事情之前先要进行推演\n\n- 沙盘推演, 从军事指挥室里学来的大学问\n- 即便已经确定了自己的工作目标，我们依然要在具体动手之前，把实施步骤推演一番，完成一次头脑中的创造，也就是第一次创造或智力上的创造。这种思想在军事上称之为沙盘推演，在很多领域都有广泛地应用\n- 通向结果的路径才是更重要的\n- 在动手做一件事之前，先推演一番。\n\n\n\n## 解决了很多技术问题，为什么依然在\"坑\"里？\n\n技术是一把利刃，程序员相信技术可以改变世界，但并不是所有问题都要用技术解决。花大力气去解决一个可能并不是问题的问题，常常是很多程序员的盲区。\n\n- 更大范围内寻找\"终\"\n\n- 程序员总喜欢用技术去解决一切问题，但很多令人寝食难安的问题其实根本不是问题。之所以找不出更简单的解决方案，很多时候原因在于程序员被自己的思考局限住了。\n\n- 不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果\n\n- 角色的差异：\n  - 不同角色工作上真正的差异是上下文的不同\n  - 虽然写的代码都一样，但你看到的是树木，人家看到的是森林，他更能从全局思考\n  - 我并不是靠技术能力解决了问题，而是凭借对需求的理解把这个问题绕过去了\n  - 而能想到问这样的问题，前提就是要跳出程序员角色思维，扩大自己工作的上下文\n  - 当你对软件开发的全生命周期都有了认识之后，你看到的就不再是一个点了，而是一条线\n\n- 工作的上下文不同，看到的维度差异很大\n  - 单一维度的思考，在多维度思考者的眼里几乎就是漏洞百出的\n  - 扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上。\n\n小结：遇到问题，多沟通，多请教，学会转换视角，转换思维，实现对问题的降维打击，以解决问题。\n\n## 入职新公司, 如何快速进入工作状态？\n\n步骤：\n\n- 了解业务\n\n- 技术\n\n  - 技术栈\n\n  - 业务架构\n\n  - 内外依赖\n\n\n- 团队运作\n\n  需求, 产品，向谁汇报\n\n- 内部活动\n\n  站会、 回顾会议、周会、代码评审、内部分享等。\n\n- 使用“行话”。在交流的过程中，学习一点”行话“。\n\n  这会让人觉得你懂行，让你很快得到信任，尽早融入团队\n\n- 找到关键点，迅速下手\n\n- 由大到小， 由内而外\n\n## 如何管理你的上级？\n\n- 领导要求的，无力反驳怎么办？\n\n我们要敢于管理上级。\n\n第一，管理上级的预期。这个过程，相当于我把自己看到的问题暴露给上级，让他选择。\n第二，帮助上级丰富知识。\n第三，说出你的想法。这其实就是我们熟悉的一个最简单的道理：会哭的孩子有奶吃。\n\n\n\n- 产品经理总拿老板说事，怎么办？\n\n实际上，老板要求的是方向，不是产品特性。大老板不会安排那么细的细节。所以，一个产品经理该做的事就是把老板给的方向，变成一个个可以实现的产品特性，他要分析其中的合理与不合理。\n\n不合理的部分应该是他和老板去沟通的，而不是让开发团队来实现。\n\n\n\n- 别人能做的，我们也要做\n\n第一，竞争对手有的产品，我们也要有。\n\n“抄”不是问题，问题是无脑地抄。\n\n所以，如果你的产品经理只想无脑抄袭，本质上，他就是在偷懒，没干好他该干的活。\n\n第二：人家能做到，说明技术上是可行的。\n\n要做什么是需求，怎么做是技术。与产品经理要确认的是，这个需求是不是合理，该不该做。技术上能否实现，这是开发团队要考虑的事情，并不是产品经理说事的理由。\n\n\n\n# 刻意练习\n\n最牛B的编码套路：\n\nSteve Yegge 在“[Practicing Programming](https://sites.google.com/site/steveyegge2/practicing-programming)”（练习编程）提到：\n\n>与你所相信的恰恰相反，单纯地每天埋头于工作并不能算是真正意义上的锻炼——参加会议并不能锻炼你的人际交往能力；回复邮件并不能提高你的打字水平。你必须定期留出时间，集中锻炼，这样才能把事情做得更好。\n\n\n\n每天都开车去上班，但我的驾驶水平远远不如专业车手；类似的情况，天天编程可能并不足以使你成为一名专业的程序员。那么，什么才能把一个普通人变成一名专业车手或者专业程序员呢？你需要锻炼什么呢？\n\n答案就在《科学美国人》的一篇名为“The Expert Mind”（专家思维）的文章里：\n\n>爱立信提出，重要的并不是经验本身，而是“努力的学习”，也就是要不断地挑战自身能力之外的东西。一些狂热的爱好者花费了大量的时间去下棋、打高尔夫球或者玩乐器，但他们可能始终停留在业余水平上，而一个训练有素的学生却可以在相对较短的时间里超越他们，原因就在这里。值得注意的是，在提高水平方面，花费在下棋上的大量时间（即使参加各种比赛）似乎还是比不过专门的训练来得更为有效。训练的主要价值在于发现弱点，并有针对性地进行提高。\n\n\n\n“努力的学习”意味着，要常常去处理那些刚好在你能力极限上的问题，也就是那些对你来说有很大可能失败的事情。如果不经历一些失败的话，你可能就不会成长。你必须不断地挑战自我，超越自己的极限。\n\n那样的挑战有时会在工作中碰到，但也未必。将锻炼从职业工作中分离出来，这在编程领域常被人称为“编码套路”（Code Kata）。\n\n\n\nCode Kata的概念是由David Thomas提出的，他是《程序员修炼之道：从小工到专家》的作者之一。这个概念主要指的是:\n>针对某一种特定技术或技能进行重复性的练习，从而将其熟练掌握。——译者注\n\n\n\n还有一些实践经验不在此列出，最后作者总结了最精炼的编程套路：\n\n第一：写博客 \n\n第二：积极参与著名的开源项目\n\n\n\n小结： 输出倒逼输入，是最好的学习方式之一；“Talk is cheap ,show me the code”. 刻意练习。\n\n\n\n# 精进书单\n\n《程序员修炼之道：从小工到专家》\n\n《高效能人士的七个习惯》\n\n《好好学习》\n\n《好好思考》\n\n《刻意练习》\n\n……\n\n\n\n# 总结\n\n学会学习、学会思考、学习用好工具, 学会复盘，学会自我迭代，学会精进，学会掌握底层思考利器。\n\n如里觉得总结对你有一点用的话，请给一个赞哦。\n\n参考：\n\n[如何成为一位技术专家](http://oenhan.com/technical-experts)\n\n[最牛B的编码套路](https://blog.csdn.net/happydeer/article/details/17023229)","slug":"10x程序员工作法 学习总结笔记","published":1,"updated":"2021-07-09T11:12:04.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr2xqjpt0000p61o2qkmbmsg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>本文总结了做为一个程序员有哪些高效的工作方式、思考方式和落实起来有用的方式和实操，请选择使用。</p>\n</blockquote>\n<p>软件行业的名著《人月神话》里提到两个重要概念：本质复杂度（Essential Complexity）和偶然复杂度（Accident Complexity）。简单来说，本质复杂度就是解决一个问题时，无论如何都要做的事，而偶然复杂度是因为做事方法不当，而导致要多做的事。</p>\n<p>所以做事需要讲究方法，各位各业都有不同的做事方法，本文总结了10x程序员的做事法则。</p>\n<p>本文笔记 根据 来自极客时间专栏上资深架构师郑晔的《10x程序员工作法》中的学习部分笔记、和其他相关资料加上个人思考的而形成的总结笔记。</p>\n<h2 id=\"忙碌原因\"><a href=\"#忙碌原因\" class=\"headerlink\" title=\"忙碌原因\"></a>忙碌原因</h2><ul>\n<li><p>本质复杂度(Essential Complexity)</p>\n<p>  问题本身复杂</p>\n</li>\n<li><p>偶然复杂度(Accident Complexity)</p>\n<p>  选用方法不当, 导致复杂度上升</p>\n</li>\n</ul>\n<h2 id=\"客观事实\"><a href=\"#客观事实\" class=\"headerlink\" title=\"客观事实\"></a>客观事实</h2><p>大部分程序员忙碌解决的问题，都不是程序问题，而是由偶然复杂度导致的问题</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>减少偶然复杂度引发的问题, 让软件开发工作有序、高效地进行; 优秀程序员的开发效率是普通程序员的 10 倍。</p>\n<p>遵循以下原则有利于减少偶然复杂度</p>\n<ul>\n<li>以始为终</li>\n<li>任务分解</li>\n<li>沟通反馈</li>\n<li>自动化</li>\n</ul>\n<h1 id=\"10x工作法原则\"><a href=\"#10x工作法原则\" class=\"headerlink\" title=\"10x工作法原则\"></a>10x工作法原则</h1><p>如何让努力不白费？</p>\n<h2 id=\"以终为始：遇到事情，倒着想\"><a href=\"#以终为始：遇到事情，倒着想\" class=\"headerlink\" title=\"以终为始：遇到事情，倒着想\"></a>以终为始：遇到事情，倒着想</h2><p>网上流传着一个帖子，亚马逊 CTO 介绍亚马逊是如何开发一项产品的，简单来说，他们采用向后工作的方法，开发一项产品的顺序为：</p>\n<ul>\n<li><p>写新闻稿；</p>\n</li>\n<li><p>写 FAQ （常见问题解答）；</p>\n</li>\n<li><p>写用户文档；</p>\n</li>\n<li><p>写代码。</p>\n</li>\n</ul>\n<p>任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental/First Creation），然后才是付诸实践，也就是实际的或第二次创造（Physical/Second Creation）。我们应该在第一次创造上多下功夫，统一集体想象，让目标更明确。</p>\n<p>“以终为始”的思维可以帮助我们更好地规划我们手头任务，也可以帮助我们发现过程中的问题。</p>\n<p>“ 以终为始”也是《高效能人士的七个习惯》中提到的一个重要习惯。这本书值得一读。</p>\n<p>史蒂芬.柯维说绝对不要以任何片面的事情为中心，应该要以原则为中心。“一个以原则为中心的人，对自己的选择胸有成竹，无论结果怎么都能专注于此，并且心安理得，内心没有羁绊。以原则为生活中心的人，总是见解不凡，思想与行为也独具一格，而坚实稳定的内在核心赐予他们高度的安全感，人生方向，智慧与力量。会让他们度过积极与充实的一生。”<br>所以找到你人生的原则，设定一个目标，以终为始。</p>\n<h2 id=\"任务分解\"><a href=\"#任务分解\" class=\"headerlink\" title=\"任务分解\"></a>任务分解</h2><ul>\n<li><p>任务分解：按部就班的前提</p>\n</li>\n<li><p>软件开发的任务分解：</p>\n<ul>\n<li>一个大问题，我们都很难给出答案，但回答小问题却是我们擅长的</li>\n<li>任务分解的粒度: 可执行。不同的可执行定义差别在于，你是否能清楚地知道这个问题该如何解决。</li>\n</ul>\n</li>\n<li><p>大师级程序员工作的秘笈</p>\n<ul>\n<li>将任务拆小，越小越好</li>\n<li>将大问题拆解成能够解决的小问题</li>\n</ul>\n</li>\n<li><p>测试也是程序员的一部分</p>\n<ul>\n<li><p>对于每个程序员来说，只有在开发阶段把代码和测试都写好，才有资格说，自己交付的是高质量的代码</p>\n</li>\n<li><p>测试驱动开发(TDD)，一种设计挑战</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>小结：面对看上去无法解决的问题，需要学会分解问题，不然无从下手。</p>\n<h2 id=\"大师级程序员的工作秘笈\"><a href=\"#大师级程序员的工作秘笈\" class=\"headerlink\" title=\"大师级程序员的工作秘笈\"></a>大师级程序员的工作秘笈</h2><p>大师级程序员每当遇到一件要做的事，把他分解成几个小任务，记录在一个清单上，然后才是动手写测试、写代码、重构这样一个小循环。等一个循环完成了，他会划掉已经做完的任务，开始下一个。一旦在解决问题的过程中遇到任务新问题，他会把要解决的问题记录在清单上，保证问题不会丢失，然后，继续回到自己正在处理的任务上。当他把一个个任务完成的时候，问题就解决完了。每个任务完成时，代码都是可以提交的。看上去简单，但是很多程序员都做不到。</p>\n<p>只有把任务分解到很小，才可能做到小步提交。而把任务分解到很小，其实证明你已经想清楚了。而大多数程序员之所以开发效率低，很多时候是没想清楚就动手了。</p>\n<p>任务分解是个好习惯，但是想要掌握它，大量的练习是必须的。</p>\n<p>作者能保持连续在github上提交代码1000天，还是挺牛逼的，这个连续提交的基础，就是我自己在练习任务分解时，不断的尝试把一件事拆细，这样，我每天都至少能保证完成一小步。当然，如果有时间了，我也会多写一点。</p>\n<p>经过这种练习之后，任务分解也就成了我的本能，不再局限于写程序上。我遇到任何需要解决的问题，脑子里的第一反应一定是，它可以怎么一步一步的完成，确定好分解之后，解决问题就是一步步做了。</p>\n<h2 id=\"DoD的价值：在做任何事情之前，先定义完成的标准\"><a href=\"#DoD的价值：在做任何事情之前，先定义完成的标准\" class=\"headerlink\" title=\"DoD的价值：在做任何事情之前，先定义完成的标准\"></a>DoD的价值：在做任何事情之前，先定义完成的标准</h2><p>DoD（Definition Of Done，完成的定义），这个概念本身并不复杂，它就是告诉我们怎样算完成了，尽量减少因为理解偏差造成的各种浪费。</p>\n<p>比如一次开发完成，表示：</p>\n<ul>\n<li>开发人员编写好功能代码</li>\n<li>编写好单元测试代码</li>\n<li>编写好集成测试代码</li>\n<li>测试可以通过</li>\n<li>代码通过了代码风格检查、测试覆盖率检查。</li>\n</ul>\n<p>一旦 DoD 确定好了，谁该做什么事、该做到什么程度就一目了然了。</p>\n<h2 id=\"如何更好得使用-DoD呢？\"><a href=\"#如何更好得使用-DoD呢？\" class=\"headerlink\" title=\"如何更好得使用 DoD呢？\"></a>如何更好得使用 DoD呢？</h2><ul>\n<li><p>DoD 是一个清单，由一个个检查项组成的，用来检查工作完成情况。</p>\n</li>\n<li><p>DoD 的检查项应该是实际可检查的，比如代码写好了，可以展示代码，单元测试代码写好了，可以进行现场测试。</p>\n</li>\n<li><p>DoD 是团队成员间彼此汇报的一种机制。有了 DoD，做事只有两种状态，即 “做完” 和 “没做完”。</p>\n</li>\n</ul>\n<h2 id=\"在做任何需求或任务之前，先定好验收标准。\"><a href=\"#在做任何需求或任务之前，先定好验收标准。\" class=\"headerlink\" title=\"在做任何需求或任务之前，先定好验收标准。\"></a>在做任何需求或任务之前，先定好验收标准。</h2><p>我们都知道，需求是软件开发的一个重要组成部分，但你可能没有仔细想过，不同的需求描述方式，可能会影响程序员对需求的理解。</p>\n<p>很多公司的软件开发模式是基于功能列表的，这个列表 “ 规定 ” 了程序员要做的功能，这种方式把一个完整的需求拆成了碎片。不到最后一刻，大部分人并没有一个完整的概念，这也就会在最后关头遇到很多意料之外的问题，结果必然是手忙脚乱。</p>\n<p>那么，这个时候验收标准变得极为重要，验收标准不仅仅描述了正常流程，也会关注到异常流程的处理。它给出了这个需求最基本的测试用例，保证了开发人员完成需求最基本的质量。一旦定义好验收标准，大量的扯皮工作就随之烟消云散了。 </p>\n<h2 id=\"尽早提交代码去集成\"><a href=\"#尽早提交代码去集成\" class=\"headerlink\" title=\"尽早提交代码去集成\"></a>尽早提交代码去集成</h2><p>持续集成指的是，频繁地将代码集成到主干。</p>\n<p>它的好处主要有两个。</p>\n<p>快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。<br>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。<br>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量</p>\n<p>Martin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</p>\n<h2 id=\"在没弄清楚之前，需求都不做\"><a href=\"#在没弄清楚之前，需求都不做\" class=\"headerlink\" title=\"在没弄清楚之前，需求都不做\"></a>在没弄清楚之前，需求都不做</h2><p>精益创业：这个名字并不是指导人们创业挣大钱的方法论。它要解决的是面向不确定性创造新事物。</p>\n<p>精益创业中的 “精益”这个词，让人们开始理解价值创造和浪费之间的关系。创造价值是每个人都能理解的，但减少浪费是很多人忽略的。所以，精益创业就是在尽可能少浪费的前提下，面向不确定性创造新事物。</p>\n<p>既然是面向不确定性创造新事物，我们唯一能做的就是 “ 试 ”。也就是说，当你有了一个新的想法时，就把想法开发成产品投入市场，然后，手机数据获取反馈，看看前面的想法是否靠谱。好想法继续加强，不靠谱的想法丢掉。</p>\n<p>既然是试，也不确定想法的有效性，最好的办法就是以最低的成本试。许多软件团队都会陷入一个非常典型的误区，不管什么需求都想做出来看看，殊不知，把软件完整做出来是最大的浪费。</p>\n<p>精益创业提供给我们的是一个做产品的思考框架。当产品经理要做一个新产品或是产品的新特性，我们就可以用精益创业的概念检验一下产品经理是否想清楚了。比如，你要做个产品特性，你要验证的东西是什么呢？要验证的目标是否有数据可以度量呢？要解决的这个问题是不是当前最重要的事情？稳了这些，我们能更好地确定产品经理提出的需求确实是经过严格思考的。</p>\n<h2 id=\"接到需求，-要先做哪些事情\"><a href=\"#接到需求，-要先做哪些事情\" class=\"headerlink\" title=\"接到需求， 要先做哪些事情\"></a>接到需求， 要先做哪些事情</h2><p>需求的拆分:用户故事</p>\n<ul>\n<li><p>问题</p>\n<p>基本上，闯入你脑海的需求描述是主题（epic），在敏捷开发中，有人称之为主用户故事（master story)<br>绝大多数问题都是由于分解的粒度太大造成的，少有因为粒度太小而出问题的<br>用户故事，它将是我们这里讨论需求管理的基本单位。</p>\n</li>\n<li><p>需求要分解<br>用户故事原则：</p>\n</li>\n</ul>\n<p>1、Independent，独立的<br>2、Negotiable，可协商的<br>3、Valuable，有价值的<br>4、Estimatable，可估算的<br>5、Small，小<br>6、Testable，可测试的</p>\n<p>需求的估算:</p>\n<p>估算的结果是相对的，不是绝对精确的，我们不必像做科研一样，只要给出一个相对估算就好，一般来说，估算的过程也是大家加深对需求理解的过程。</p>\n<p>优先级管理：做最重要的事情</p>\n<p>需求分解之后，最重要的是，排列需求的优先级。优先级的排列方式有很多，我们可以借鉴时间管理的方法，把事情按照重要和紧急的维度进行划分，得到了四个象限。我们要尽可能把精力放在重要的事情上，而不是把紧急的事情当成优先级排序的方式。</p>\n<p>确定事情的重要程度, 一种方式就是找回丢失的上下文，如果无法判断好的办法, 那就引入外部更大的上下文</p>\n<p><strong>小结</strong>：需求从产品、开发、测试需要对齐，确保理解一致，按一定的敏捷开发流程来不段迭代开发流程，也是高效的工作法则之一。</p>\n<h2 id=\"为什么说做事情之前先要进行推演\"><a href=\"#为什么说做事情之前先要进行推演\" class=\"headerlink\" title=\"为什么说做事情之前先要进行推演\"></a>为什么说做事情之前先要进行推演</h2><ul>\n<li>沙盘推演, 从军事指挥室里学来的大学问</li>\n<li>即便已经确定了自己的工作目标，我们依然要在具体动手之前，把实施步骤推演一番，完成一次头脑中的创造，也就是第一次创造或智力上的创造。这种思想在军事上称之为沙盘推演，在很多领域都有广泛地应用</li>\n<li>通向结果的路径才是更重要的</li>\n<li>在动手做一件事之前，先推演一番。</li>\n</ul>\n<h2 id=\"解决了很多技术问题，为什么依然在”坑”里？\"><a href=\"#解决了很多技术问题，为什么依然在”坑”里？\" class=\"headerlink\" title=\"解决了很多技术问题，为什么依然在”坑”里？\"></a>解决了很多技术问题，为什么依然在”坑”里？</h2><p>技术是一把利刃，程序员相信技术可以改变世界，但并不是所有问题都要用技术解决。花大力气去解决一个可能并不是问题的问题，常常是很多程序员的盲区。</p>\n<ul>\n<li><p>更大范围内寻找”终”</p>\n</li>\n<li><p>程序员总喜欢用技术去解决一切问题，但很多令人寝食难安的问题其实根本不是问题。之所以找不出更简单的解决方案，很多时候原因在于程序员被自己的思考局限住了。</p>\n</li>\n<li><p>不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果</p>\n</li>\n<li><p>角色的差异：</p>\n<ul>\n<li>不同角色工作上真正的差异是上下文的不同</li>\n<li>虽然写的代码都一样，但你看到的是树木，人家看到的是森林，他更能从全局思考</li>\n<li>我并不是靠技术能力解决了问题，而是凭借对需求的理解把这个问题绕过去了</li>\n<li>而能想到问这样的问题，前提就是要跳出程序员角色思维，扩大自己工作的上下文</li>\n<li>当你对软件开发的全生命周期都有了认识之后，你看到的就不再是一个点了，而是一条线</li>\n</ul>\n</li>\n<li><p>工作的上下文不同，看到的维度差异很大</p>\n<ul>\n<li>单一维度的思考，在多维度思考者的眼里几乎就是漏洞百出的</li>\n<li>扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上。</li>\n</ul>\n</li>\n</ul>\n<p>小结：遇到问题，多沟通，多请教，学会转换视角，转换思维，实现对问题的降维打击，以解决问题。</p>\n<h2 id=\"入职新公司-如何快速进入工作状态？\"><a href=\"#入职新公司-如何快速进入工作状态？\" class=\"headerlink\" title=\"入职新公司, 如何快速进入工作状态？\"></a>入职新公司, 如何快速进入工作状态？</h2><p>步骤：</p>\n<ul>\n<li><p>了解业务</p>\n</li>\n<li><p>技术</p>\n<ul>\n<li><p>技术栈</p>\n</li>\n<li><p>业务架构</p>\n</li>\n<li><p>内外依赖</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>团队运作</p>\n<p>需求, 产品，向谁汇报</p>\n</li>\n<li><p>内部活动</p>\n<p>站会、 回顾会议、周会、代码评审、内部分享等。</p>\n</li>\n<li><p>使用“行话”。在交流的过程中，学习一点”行话“。</p>\n<p>这会让人觉得你懂行，让你很快得到信任，尽早融入团队</p>\n</li>\n<li><p>找到关键点，迅速下手</p>\n</li>\n<li><p>由大到小， 由内而外</p>\n</li>\n</ul>\n<h2 id=\"如何管理你的上级？\"><a href=\"#如何管理你的上级？\" class=\"headerlink\" title=\"如何管理你的上级？\"></a>如何管理你的上级？</h2><ul>\n<li>领导要求的，无力反驳怎么办？</li>\n</ul>\n<p>我们要敢于管理上级。</p>\n<p>第一，管理上级的预期。这个过程，相当于我把自己看到的问题暴露给上级，让他选择。<br>第二，帮助上级丰富知识。<br>第三，说出你的想法。这其实就是我们熟悉的一个最简单的道理：会哭的孩子有奶吃。</p>\n<ul>\n<li>产品经理总拿老板说事，怎么办？</li>\n</ul>\n<p>实际上，老板要求的是方向，不是产品特性。大老板不会安排那么细的细节。所以，一个产品经理该做的事就是把老板给的方向，变成一个个可以实现的产品特性，他要分析其中的合理与不合理。</p>\n<p>不合理的部分应该是他和老板去沟通的，而不是让开发团队来实现。</p>\n<ul>\n<li>别人能做的，我们也要做</li>\n</ul>\n<p>第一，竞争对手有的产品，我们也要有。</p>\n<p>“抄”不是问题，问题是无脑地抄。</p>\n<p>所以，如果你的产品经理只想无脑抄袭，本质上，他就是在偷懒，没干好他该干的活。</p>\n<p>第二：人家能做到，说明技术上是可行的。</p>\n<p>要做什么是需求，怎么做是技术。与产品经理要确认的是，这个需求是不是合理，该不该做。技术上能否实现，这是开发团队要考虑的事情，并不是产品经理说事的理由。</p>\n<h1 id=\"刻意练习\"><a href=\"#刻意练习\" class=\"headerlink\" title=\"刻意练习\"></a>刻意练习</h1><p>最牛B的编码套路：</p>\n<p>Steve Yegge 在“<a href=\"https://sites.google.com/site/steveyegge2/practicing-programming\">Practicing Programming</a>”（练习编程）提到：</p>\n<blockquote>\n<p>与你所相信的恰恰相反，单纯地每天埋头于工作并不能算是真正意义上的锻炼——参加会议并不能锻炼你的人际交往能力；回复邮件并不能提高你的打字水平。你必须定期留出时间，集中锻炼，这样才能把事情做得更好。</p>\n</blockquote>\n<p>每天都开车去上班，但我的驾驶水平远远不如专业车手；类似的情况，天天编程可能并不足以使你成为一名专业的程序员。那么，什么才能把一个普通人变成一名专业车手或者专业程序员呢？你需要锻炼什么呢？</p>\n<p>答案就在《科学美国人》的一篇名为“The Expert Mind”（专家思维）的文章里：</p>\n<blockquote>\n<p>爱立信提出，重要的并不是经验本身，而是“努力的学习”，也就是要不断地挑战自身能力之外的东西。一些狂热的爱好者花费了大量的时间去下棋、打高尔夫球或者玩乐器，但他们可能始终停留在业余水平上，而一个训练有素的学生却可以在相对较短的时间里超越他们，原因就在这里。值得注意的是，在提高水平方面，花费在下棋上的大量时间（即使参加各种比赛）似乎还是比不过专门的训练来得更为有效。训练的主要价值在于发现弱点，并有针对性地进行提高。</p>\n</blockquote>\n<p>“努力的学习”意味着，要常常去处理那些刚好在你能力极限上的问题，也就是那些对你来说有很大可能失败的事情。如果不经历一些失败的话，你可能就不会成长。你必须不断地挑战自我，超越自己的极限。</p>\n<p>那样的挑战有时会在工作中碰到，但也未必。将锻炼从职业工作中分离出来，这在编程领域常被人称为“编码套路”（Code Kata）。</p>\n<p>Code Kata的概念是由David Thomas提出的，他是《程序员修炼之道：从小工到专家》的作者之一。这个概念主要指的是:</p>\n<blockquote>\n<p>针对某一种特定技术或技能进行重复性的练习，从而将其熟练掌握。——译者注</p>\n</blockquote>\n<p>还有一些实践经验不在此列出，最后作者总结了最精炼的编程套路：</p>\n<p>第一：写博客 </p>\n<p>第二：积极参与著名的开源项目</p>\n<p>小结： 输出倒逼输入，是最好的学习方式之一；“Talk is cheap ,show me the code”. 刻意练习。</p>\n<h1 id=\"精进书单\"><a href=\"#精进书单\" class=\"headerlink\" title=\"精进书单\"></a>精进书单</h1><p>《程序员修炼之道：从小工到专家》</p>\n<p>《高效能人士的七个习惯》</p>\n<p>《好好学习》</p>\n<p>《好好思考》</p>\n<p>《刻意练习》</p>\n<p>……</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>学会学习、学会思考、学习用好工具, 学会复盘，学会自我迭代，学会精进，学会掌握底层思考利器。</p>\n<p>如里觉得总结对你有一点用的话，请给一个赞哦。</p>\n<p>参考：</p>\n<p><a href=\"http://oenhan.com/technical-experts\">如何成为一位技术专家</a></p>\n<p><a href=\"https://blog.csdn.net/happydeer/article/details/17023229\">最牛B的编码套路</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>本文总结了做为一个程序员有哪些高效的工作方式、思考方式和落实起来有用的方式和实操，请选择使用。</p>\n</blockquote>\n<p>软件行业的名著《人月神话》里提到两个重要概念：本质复杂度（Essential Complexity）和偶然复杂度（Accident Complexity）。简单来说，本质复杂度就是解决一个问题时，无论如何都要做的事，而偶然复杂度是因为做事方法不当，而导致要多做的事。</p>\n<p>所以做事需要讲究方法，各位各业都有不同的做事方法，本文总结了10x程序员的做事法则。</p>\n<p>本文笔记 根据 来自极客时间专栏上资深架构师郑晔的《10x程序员工作法》中的学习部分笔记、和其他相关资料加上个人思考的而形成的总结笔记。</p>\n<h2 id=\"忙碌原因\"><a href=\"#忙碌原因\" class=\"headerlink\" title=\"忙碌原因\"></a>忙碌原因</h2><ul>\n<li><p>本质复杂度(Essential Complexity)</p>\n<p>  问题本身复杂</p>\n</li>\n<li><p>偶然复杂度(Accident Complexity)</p>\n<p>  选用方法不当, 导致复杂度上升</p>\n</li>\n</ul>\n<h2 id=\"客观事实\"><a href=\"#客观事实\" class=\"headerlink\" title=\"客观事实\"></a>客观事实</h2><p>大部分程序员忙碌解决的问题，都不是程序问题，而是由偶然复杂度导致的问题</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>减少偶然复杂度引发的问题, 让软件开发工作有序、高效地进行; 优秀程序员的开发效率是普通程序员的 10 倍。</p>\n<p>遵循以下原则有利于减少偶然复杂度</p>\n<ul>\n<li>以始为终</li>\n<li>任务分解</li>\n<li>沟通反馈</li>\n<li>自动化</li>\n</ul>\n<h1 id=\"10x工作法原则\"><a href=\"#10x工作法原则\" class=\"headerlink\" title=\"10x工作法原则\"></a>10x工作法原则</h1><p>如何让努力不白费？</p>\n<h2 id=\"以终为始：遇到事情，倒着想\"><a href=\"#以终为始：遇到事情，倒着想\" class=\"headerlink\" title=\"以终为始：遇到事情，倒着想\"></a>以终为始：遇到事情，倒着想</h2><p>网上流传着一个帖子，亚马逊 CTO 介绍亚马逊是如何开发一项产品的，简单来说，他们采用向后工作的方法，开发一项产品的顺序为：</p>\n<ul>\n<li><p>写新闻稿；</p>\n</li>\n<li><p>写 FAQ （常见问题解答）；</p>\n</li>\n<li><p>写用户文档；</p>\n</li>\n<li><p>写代码。</p>\n</li>\n</ul>\n<p>任何事物都要经过两次创造：一次是在头脑中的创造，也就是智力上的或者第一次创造（Mental/First Creation），然后才是付诸实践，也就是实际的或第二次创造（Physical/Second Creation）。我们应该在第一次创造上多下功夫，统一集体想象，让目标更明确。</p>\n<p>“以终为始”的思维可以帮助我们更好地规划我们手头任务，也可以帮助我们发现过程中的问题。</p>\n<p>“ 以终为始”也是《高效能人士的七个习惯》中提到的一个重要习惯。这本书值得一读。</p>\n<p>史蒂芬.柯维说绝对不要以任何片面的事情为中心，应该要以原则为中心。“一个以原则为中心的人，对自己的选择胸有成竹，无论结果怎么都能专注于此，并且心安理得，内心没有羁绊。以原则为生活中心的人，总是见解不凡，思想与行为也独具一格，而坚实稳定的内在核心赐予他们高度的安全感，人生方向，智慧与力量。会让他们度过积极与充实的一生。”<br>所以找到你人生的原则，设定一个目标，以终为始。</p>\n<h2 id=\"任务分解\"><a href=\"#任务分解\" class=\"headerlink\" title=\"任务分解\"></a>任务分解</h2><ul>\n<li><p>任务分解：按部就班的前提</p>\n</li>\n<li><p>软件开发的任务分解：</p>\n<ul>\n<li>一个大问题，我们都很难给出答案，但回答小问题却是我们擅长的</li>\n<li>任务分解的粒度: 可执行。不同的可执行定义差别在于，你是否能清楚地知道这个问题该如何解决。</li>\n</ul>\n</li>\n<li><p>大师级程序员工作的秘笈</p>\n<ul>\n<li>将任务拆小，越小越好</li>\n<li>将大问题拆解成能够解决的小问题</li>\n</ul>\n</li>\n<li><p>测试也是程序员的一部分</p>\n<ul>\n<li><p>对于每个程序员来说，只有在开发阶段把代码和测试都写好，才有资格说，自己交付的是高质量的代码</p>\n</li>\n<li><p>测试驱动开发(TDD)，一种设计挑战</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>小结：面对看上去无法解决的问题，需要学会分解问题，不然无从下手。</p>\n<h2 id=\"大师级程序员的工作秘笈\"><a href=\"#大师级程序员的工作秘笈\" class=\"headerlink\" title=\"大师级程序员的工作秘笈\"></a>大师级程序员的工作秘笈</h2><p>大师级程序员每当遇到一件要做的事，把他分解成几个小任务，记录在一个清单上，然后才是动手写测试、写代码、重构这样一个小循环。等一个循环完成了，他会划掉已经做完的任务，开始下一个。一旦在解决问题的过程中遇到任务新问题，他会把要解决的问题记录在清单上，保证问题不会丢失，然后，继续回到自己正在处理的任务上。当他把一个个任务完成的时候，问题就解决完了。每个任务完成时，代码都是可以提交的。看上去简单，但是很多程序员都做不到。</p>\n<p>只有把任务分解到很小，才可能做到小步提交。而把任务分解到很小，其实证明你已经想清楚了。而大多数程序员之所以开发效率低，很多时候是没想清楚就动手了。</p>\n<p>任务分解是个好习惯，但是想要掌握它，大量的练习是必须的。</p>\n<p>作者能保持连续在github上提交代码1000天，还是挺牛逼的，这个连续提交的基础，就是我自己在练习任务分解时，不断的尝试把一件事拆细，这样，我每天都至少能保证完成一小步。当然，如果有时间了，我也会多写一点。</p>\n<p>经过这种练习之后，任务分解也就成了我的本能，不再局限于写程序上。我遇到任何需要解决的问题，脑子里的第一反应一定是，它可以怎么一步一步的完成，确定好分解之后，解决问题就是一步步做了。</p>\n<h2 id=\"DoD的价值：在做任何事情之前，先定义完成的标准\"><a href=\"#DoD的价值：在做任何事情之前，先定义完成的标准\" class=\"headerlink\" title=\"DoD的价值：在做任何事情之前，先定义完成的标准\"></a>DoD的价值：在做任何事情之前，先定义完成的标准</h2><p>DoD（Definition Of Done，完成的定义），这个概念本身并不复杂，它就是告诉我们怎样算完成了，尽量减少因为理解偏差造成的各种浪费。</p>\n<p>比如一次开发完成，表示：</p>\n<ul>\n<li>开发人员编写好功能代码</li>\n<li>编写好单元测试代码</li>\n<li>编写好集成测试代码</li>\n<li>测试可以通过</li>\n<li>代码通过了代码风格检查、测试覆盖率检查。</li>\n</ul>\n<p>一旦 DoD 确定好了，谁该做什么事、该做到什么程度就一目了然了。</p>\n<h2 id=\"如何更好得使用-DoD呢？\"><a href=\"#如何更好得使用-DoD呢？\" class=\"headerlink\" title=\"如何更好得使用 DoD呢？\"></a>如何更好得使用 DoD呢？</h2><ul>\n<li><p>DoD 是一个清单，由一个个检查项组成的，用来检查工作完成情况。</p>\n</li>\n<li><p>DoD 的检查项应该是实际可检查的，比如代码写好了，可以展示代码，单元测试代码写好了，可以进行现场测试。</p>\n</li>\n<li><p>DoD 是团队成员间彼此汇报的一种机制。有了 DoD，做事只有两种状态，即 “做完” 和 “没做完”。</p>\n</li>\n</ul>\n<h2 id=\"在做任何需求或任务之前，先定好验收标准。\"><a href=\"#在做任何需求或任务之前，先定好验收标准。\" class=\"headerlink\" title=\"在做任何需求或任务之前，先定好验收标准。\"></a>在做任何需求或任务之前，先定好验收标准。</h2><p>我们都知道，需求是软件开发的一个重要组成部分，但你可能没有仔细想过，不同的需求描述方式，可能会影响程序员对需求的理解。</p>\n<p>很多公司的软件开发模式是基于功能列表的，这个列表 “ 规定 ” 了程序员要做的功能，这种方式把一个完整的需求拆成了碎片。不到最后一刻，大部分人并没有一个完整的概念，这也就会在最后关头遇到很多意料之外的问题，结果必然是手忙脚乱。</p>\n<p>那么，这个时候验收标准变得极为重要，验收标准不仅仅描述了正常流程，也会关注到异常流程的处理。它给出了这个需求最基本的测试用例，保证了开发人员完成需求最基本的质量。一旦定义好验收标准，大量的扯皮工作就随之烟消云散了。 </p>\n<h2 id=\"尽早提交代码去集成\"><a href=\"#尽早提交代码去集成\" class=\"headerlink\" title=\"尽早提交代码去集成\"></a>尽早提交代码去集成</h2><p>持续集成指的是，频繁地将代码集成到主干。</p>\n<p>它的好处主要有两个。</p>\n<p>快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。<br>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。<br>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量</p>\n<p>Martin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</p>\n<h2 id=\"在没弄清楚之前，需求都不做\"><a href=\"#在没弄清楚之前，需求都不做\" class=\"headerlink\" title=\"在没弄清楚之前，需求都不做\"></a>在没弄清楚之前，需求都不做</h2><p>精益创业：这个名字并不是指导人们创业挣大钱的方法论。它要解决的是面向不确定性创造新事物。</p>\n<p>精益创业中的 “精益”这个词，让人们开始理解价值创造和浪费之间的关系。创造价值是每个人都能理解的，但减少浪费是很多人忽略的。所以，精益创业就是在尽可能少浪费的前提下，面向不确定性创造新事物。</p>\n<p>既然是面向不确定性创造新事物，我们唯一能做的就是 “ 试 ”。也就是说，当你有了一个新的想法时，就把想法开发成产品投入市场，然后，手机数据获取反馈，看看前面的想法是否靠谱。好想法继续加强，不靠谱的想法丢掉。</p>\n<p>既然是试，也不确定想法的有效性，最好的办法就是以最低的成本试。许多软件团队都会陷入一个非常典型的误区，不管什么需求都想做出来看看，殊不知，把软件完整做出来是最大的浪费。</p>\n<p>精益创业提供给我们的是一个做产品的思考框架。当产品经理要做一个新产品或是产品的新特性，我们就可以用精益创业的概念检验一下产品经理是否想清楚了。比如，你要做个产品特性，你要验证的东西是什么呢？要验证的目标是否有数据可以度量呢？要解决的这个问题是不是当前最重要的事情？稳了这些，我们能更好地确定产品经理提出的需求确实是经过严格思考的。</p>\n<h2 id=\"接到需求，-要先做哪些事情\"><a href=\"#接到需求，-要先做哪些事情\" class=\"headerlink\" title=\"接到需求， 要先做哪些事情\"></a>接到需求， 要先做哪些事情</h2><p>需求的拆分:用户故事</p>\n<ul>\n<li><p>问题</p>\n<p>基本上，闯入你脑海的需求描述是主题（epic），在敏捷开发中，有人称之为主用户故事（master story)<br>绝大多数问题都是由于分解的粒度太大造成的，少有因为粒度太小而出问题的<br>用户故事，它将是我们这里讨论需求管理的基本单位。</p>\n</li>\n<li><p>需求要分解<br>用户故事原则：</p>\n</li>\n</ul>\n<p>1、Independent，独立的<br>2、Negotiable，可协商的<br>3、Valuable，有价值的<br>4、Estimatable，可估算的<br>5、Small，小<br>6、Testable，可测试的</p>\n<p>需求的估算:</p>\n<p>估算的结果是相对的，不是绝对精确的，我们不必像做科研一样，只要给出一个相对估算就好，一般来说，估算的过程也是大家加深对需求理解的过程。</p>\n<p>优先级管理：做最重要的事情</p>\n<p>需求分解之后，最重要的是，排列需求的优先级。优先级的排列方式有很多，我们可以借鉴时间管理的方法，把事情按照重要和紧急的维度进行划分，得到了四个象限。我们要尽可能把精力放在重要的事情上，而不是把紧急的事情当成优先级排序的方式。</p>\n<p>确定事情的重要程度, 一种方式就是找回丢失的上下文，如果无法判断好的办法, 那就引入外部更大的上下文</p>\n<p><strong>小结</strong>：需求从产品、开发、测试需要对齐，确保理解一致，按一定的敏捷开发流程来不段迭代开发流程，也是高效的工作法则之一。</p>\n<h2 id=\"为什么说做事情之前先要进行推演\"><a href=\"#为什么说做事情之前先要进行推演\" class=\"headerlink\" title=\"为什么说做事情之前先要进行推演\"></a>为什么说做事情之前先要进行推演</h2><ul>\n<li>沙盘推演, 从军事指挥室里学来的大学问</li>\n<li>即便已经确定了自己的工作目标，我们依然要在具体动手之前，把实施步骤推演一番，完成一次头脑中的创造，也就是第一次创造或智力上的创造。这种思想在军事上称之为沙盘推演，在很多领域都有广泛地应用</li>\n<li>通向结果的路径才是更重要的</li>\n<li>在动手做一件事之前，先推演一番。</li>\n</ul>\n<h2 id=\"解决了很多技术问题，为什么依然在”坑”里？\"><a href=\"#解决了很多技术问题，为什么依然在”坑”里？\" class=\"headerlink\" title=\"解决了很多技术问题，为什么依然在”坑”里？\"></a>解决了很多技术问题，为什么依然在”坑”里？</h2><p>技术是一把利刃，程序员相信技术可以改变世界，但并不是所有问题都要用技术解决。花大力气去解决一个可能并不是问题的问题，常常是很多程序员的盲区。</p>\n<ul>\n<li><p>更大范围内寻找”终”</p>\n</li>\n<li><p>程序员总喜欢用技术去解决一切问题，但很多令人寝食难安的问题其实根本不是问题。之所以找不出更简单的解决方案，很多时候原因在于程序员被自己的思考局限住了。</p>\n</li>\n<li><p>不同角色工作真正的差异在于上下文的差异。在一个局部上下文难以解决的问题，换到另外一个上下文甚至是可以不解决的。所以说无论单点有多努力也只是局部优化，很难达到最优的效果</p>\n</li>\n<li><p>角色的差异：</p>\n<ul>\n<li>不同角色工作上真正的差异是上下文的不同</li>\n<li>虽然写的代码都一样，但你看到的是树木，人家看到的是森林，他更能从全局思考</li>\n<li>我并不是靠技术能力解决了问题，而是凭借对需求的理解把这个问题绕过去了</li>\n<li>而能想到问这样的问题，前提就是要跳出程序员角色思维，扩大自己工作的上下文</li>\n<li>当你对软件开发的全生命周期都有了认识之后，你看到的就不再是一个点了，而是一条线</li>\n</ul>\n</li>\n<li><p>工作的上下文不同，看到的维度差异很大</p>\n<ul>\n<li>单一维度的思考，在多维度思考者的眼里几乎就是漏洞百出的</li>\n<li>扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上。</li>\n</ul>\n</li>\n</ul>\n<p>小结：遇到问题，多沟通，多请教，学会转换视角，转换思维，实现对问题的降维打击，以解决问题。</p>\n<h2 id=\"入职新公司-如何快速进入工作状态？\"><a href=\"#入职新公司-如何快速进入工作状态？\" class=\"headerlink\" title=\"入职新公司, 如何快速进入工作状态？\"></a>入职新公司, 如何快速进入工作状态？</h2><p>步骤：</p>\n<ul>\n<li><p>了解业务</p>\n</li>\n<li><p>技术</p>\n<ul>\n<li><p>技术栈</p>\n</li>\n<li><p>业务架构</p>\n</li>\n<li><p>内外依赖</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>团队运作</p>\n<p>需求, 产品，向谁汇报</p>\n</li>\n<li><p>内部活动</p>\n<p>站会、 回顾会议、周会、代码评审、内部分享等。</p>\n</li>\n<li><p>使用“行话”。在交流的过程中，学习一点”行话“。</p>\n<p>这会让人觉得你懂行，让你很快得到信任，尽早融入团队</p>\n</li>\n<li><p>找到关键点，迅速下手</p>\n</li>\n<li><p>由大到小， 由内而外</p>\n</li>\n</ul>\n<h2 id=\"如何管理你的上级？\"><a href=\"#如何管理你的上级？\" class=\"headerlink\" title=\"如何管理你的上级？\"></a>如何管理你的上级？</h2><ul>\n<li>领导要求的，无力反驳怎么办？</li>\n</ul>\n<p>我们要敢于管理上级。</p>\n<p>第一，管理上级的预期。这个过程，相当于我把自己看到的问题暴露给上级，让他选择。<br>第二，帮助上级丰富知识。<br>第三，说出你的想法。这其实就是我们熟悉的一个最简单的道理：会哭的孩子有奶吃。</p>\n<ul>\n<li>产品经理总拿老板说事，怎么办？</li>\n</ul>\n<p>实际上，老板要求的是方向，不是产品特性。大老板不会安排那么细的细节。所以，一个产品经理该做的事就是把老板给的方向，变成一个个可以实现的产品特性，他要分析其中的合理与不合理。</p>\n<p>不合理的部分应该是他和老板去沟通的，而不是让开发团队来实现。</p>\n<ul>\n<li>别人能做的，我们也要做</li>\n</ul>\n<p>第一，竞争对手有的产品，我们也要有。</p>\n<p>“抄”不是问题，问题是无脑地抄。</p>\n<p>所以，如果你的产品经理只想无脑抄袭，本质上，他就是在偷懒，没干好他该干的活。</p>\n<p>第二：人家能做到，说明技术上是可行的。</p>\n<p>要做什么是需求，怎么做是技术。与产品经理要确认的是，这个需求是不是合理，该不该做。技术上能否实现，这是开发团队要考虑的事情，并不是产品经理说事的理由。</p>\n<h1 id=\"刻意练习\"><a href=\"#刻意练习\" class=\"headerlink\" title=\"刻意练习\"></a>刻意练习</h1><p>最牛B的编码套路：</p>\n<p>Steve Yegge 在“<a href=\"https://sites.google.com/site/steveyegge2/practicing-programming\">Practicing Programming</a>”（练习编程）提到：</p>\n<blockquote>\n<p>与你所相信的恰恰相反，单纯地每天埋头于工作并不能算是真正意义上的锻炼——参加会议并不能锻炼你的人际交往能力；回复邮件并不能提高你的打字水平。你必须定期留出时间，集中锻炼，这样才能把事情做得更好。</p>\n</blockquote>\n<p>每天都开车去上班，但我的驾驶水平远远不如专业车手；类似的情况，天天编程可能并不足以使你成为一名专业的程序员。那么，什么才能把一个普通人变成一名专业车手或者专业程序员呢？你需要锻炼什么呢？</p>\n<p>答案就在《科学美国人》的一篇名为“The Expert Mind”（专家思维）的文章里：</p>\n<blockquote>\n<p>爱立信提出，重要的并不是经验本身，而是“努力的学习”，也就是要不断地挑战自身能力之外的东西。一些狂热的爱好者花费了大量的时间去下棋、打高尔夫球或者玩乐器，但他们可能始终停留在业余水平上，而一个训练有素的学生却可以在相对较短的时间里超越他们，原因就在这里。值得注意的是，在提高水平方面，花费在下棋上的大量时间（即使参加各种比赛）似乎还是比不过专门的训练来得更为有效。训练的主要价值在于发现弱点，并有针对性地进行提高。</p>\n</blockquote>\n<p>“努力的学习”意味着，要常常去处理那些刚好在你能力极限上的问题，也就是那些对你来说有很大可能失败的事情。如果不经历一些失败的话，你可能就不会成长。你必须不断地挑战自我，超越自己的极限。</p>\n<p>那样的挑战有时会在工作中碰到，但也未必。将锻炼从职业工作中分离出来，这在编程领域常被人称为“编码套路”（Code Kata）。</p>\n<p>Code Kata的概念是由David Thomas提出的，他是《程序员修炼之道：从小工到专家》的作者之一。这个概念主要指的是:</p>\n<blockquote>\n<p>针对某一种特定技术或技能进行重复性的练习，从而将其熟练掌握。——译者注</p>\n</blockquote>\n<p>还有一些实践经验不在此列出，最后作者总结了最精炼的编程套路：</p>\n<p>第一：写博客 </p>\n<p>第二：积极参与著名的开源项目</p>\n<p>小结： 输出倒逼输入，是最好的学习方式之一；“Talk is cheap ,show me the code”. 刻意练习。</p>\n<h1 id=\"精进书单\"><a href=\"#精进书单\" class=\"headerlink\" title=\"精进书单\"></a>精进书单</h1><p>《程序员修炼之道：从小工到专家》</p>\n<p>《高效能人士的七个习惯》</p>\n<p>《好好学习》</p>\n<p>《好好思考》</p>\n<p>《刻意练习》</p>\n<p>……</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>学会学习、学会思考、学习用好工具, 学会复盘，学会自我迭代，学会精进，学会掌握底层思考利器。</p>\n<p>如里觉得总结对你有一点用的话，请给一个赞哦。</p>\n<p>参考：</p>\n<p><a href=\"http://oenhan.com/technical-experts\">如何成为一位技术专家</a></p>\n<p><a href=\"https://blog.csdn.net/happydeer/article/details/17023229\">最牛B的编码套路</a></p>\n"},{"title":"test","date":"2021-07-09T11:18:47.000Z","_content":"","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2021-07-09 19:18:47\ntags:\n---\n","slug":"test","published":1,"updated":"2021-07-09T11:18:47.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr2xqjpx0001p61o3evh3bcg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"让你最快速地改善代码质量的20条编程规范","date":"2021-07-09T11:18:47.000Z","_content":"\n\n> 根据学习根据极客时间 《设计模式之美》专栏 （王争 前Google工程师）和《阿里 java 规范》整理总结。\n>\n> 分别介绍编码规范的三个部分：命名与注释（Naming and Comments）、代码风格（Code Style）和编程技巧（Coding Tips）。\n\n\n##  关于命名\n\n- 命名的关键是能准确达意。对于不同作用域的命名，我们可以适当地选择不同的长度。作用域小的变量（比如临时变量），可以适当地选择短一些的命名方式。除此之外，命名中也可以使用一些耳熟能详的缩写。\n- 我们可以借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。\n- 命名要可读、可搜索。不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范，不要用些反直觉的命名。\n- 接口有两种命名方式：一种是在接口中带前缀“I”；另一种是在接口的实现类中带后缀“Impl”。对于抽象类的命名，也有两种方式，一种是带上前缀“Abstract”，一种是不带前缀。这两种命名方式都可以，关键是要在项目中统一。\n\n## 关于注释\n\n- 注释的目的就是让代码更容易看懂。只要符合这个要求的内容，你就可以将它写到注释里。总结一下，注释的内容主要包含这样三个方面：做什么、为什么、怎么做。对于一些复杂的类和接口，我们可能还需要写明“如何用”。\n- 注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写得尽可能全面、详细，而函数内部的注释要相对少一些，一般都是靠好的命名、提炼函数、解释性变量、总结性注释来提高代码可读性。\n\n## 补充：\n\n开发前，我一般先写注释，再写代码。比如写一个方法，我会先拆分业务逻辑，把注释给写上。后面再看注释，写代码。\n\n```java\n// todo \npublic void createOrder(RequestVo request) {\n  // todo 校验用户登录\n  // todo 校验商品\n  // todo 创建订单\n  // todo 拼装、返回结果集\n}\n```\n\n关于注释：之前我的看法只要逻辑清晰命名准确达意就不用写注释了，现在回过来想这个问题，代码是需要不断维护的，即使当时你思路清晰那么过了一段时间后还能那么清晰么。人的大脑只会记住关键的信息，那么注释就是帮助我们梳理自己的想法和逻辑沉淀下来，是百利无害的事情，当别人接手也能迅速理解，降低沟通成本。如何注释才是好的注释呢？文中提到三点：做什么、为什么做、怎么做、怎么用（API）。这里最重要的事做什么，。我再补充一点，可以加下使用场景或者业务场景。\n\n关于命名：这点我基本无疑义，总结下来就是两点：简洁达意和风格统一。\n\n# 理论五：让你最快速地改善代码质量的20条编程规范（中）\n\n## 1 函数、类多大才合适？\n\n函数的代码行数不要超过一屏幕的大小，比如 50 行。类的大小限制比较难确定。\n\n## 2.一行代码多长最合适？\n\n最好不要超过 IDE 显示的宽度。当然，限制也不能太小，太小会导致很多稍微长点的语句被折成两行，也会影响到代码的整洁，不利于阅读。\n\n## 3. 善用空行分割单元块\n\n对于比较长的函数，为了让逻辑更加清晰，可以使用空行来分割各个代码块。在类内部，成员变量与函数之间、静态成员变量与普通成员变量之间、函数之间，甚至成员变量之间，都可以通过添加空行的方式，让不同模块的代码之间的界限更加明确。\n\n## 4. 四格缩进还是两格缩进？\n\n我个人比较推荐使用两格缩进，这样可以节省空间，特别是在代码嵌套层次比较深的情况下。除此之外，值得强调的是，不管是用两格缩进还是四格缩进，一定不要用 tab 键缩进。\n\n## 5. 大括号是否要另起一行？\n\n我个人还是比较推荐将大括号放到跟上一条语句同一行的风格，这样可以节省代码行数。但是，将大括号另起一行，也有它的优势，那就是，左右括号可以垂直对齐，哪些代码属于哪一个代码块，更加一目了然。\n\n## 6. 类中成员的排列顺序\n\n在 Google Java 编程规范中，依赖类按照字母序从小到大排列。类中先写成员变量后写函数。成员变量之间或函数之间，先写静态成员变量或函数，后写普通变量或函数，并且按照作用域大小依次排列。\n\n\n\n# 关于编码技巧\n\n## 1. 将复杂的逻辑提炼拆分成函数和类。\n\n## 2. 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\n\n​\t\t我个人觉得，函数包含 3、4 个参数的时候还是能接受的，大于等于 5 个的时候，我们就觉得参数有点过多了，会影响到代码的可读性，使用起来也不方便。针对参数过多的情况，一般有 2 种处理方法。\n\n- 考虑函数是否职责单一，是否能通过拆分成多个函数的方式来减少参数。示例代码如下所示：\n\n  ```java\n  public User getUser(String username, String telephone, String email);\n  \n  // 拆分成多个函数\n  public User getUserByUsername(String username);\n  public User getUserByTelephone(String telephone);\n  public User getUserByEmail(String email);\n  ```\n\n- 将函数的参数封装成对象。示例代码如下所示：\n\n    ```java\n    \n    public void postBlog(String title, String summary, String keywords, String content, String category, long authorId);\n    \n    // 将参数封装成对象\n    public class Blog {\n      private String title;\n      private String summary;\n      private String keywords;\n      private Strint content;\n      private String category;\n      private long authorId;\n    }\n    public void postBlog(Blog blog);\n    ```\n\n    \n\n## 3. 函数中不要使用参数来做代码执行逻辑的控制。\n\n不要在函数中使用布尔类型的标识参数来控制内部逻辑，true 的时候走这块逻辑，false 的时候走另一块逻辑。这明显违背了单一职责原则和接口隔离原则。我建议将其拆成两个函数，可读性上也要更好。我举个例子来说明一下。\n\n```java\n// 将其拆分成两个函数\npublic void buyCourse(long userId, long courseId);\npublic void buyCourseForVip(long userId, long courseId);\n```\n\n不过，如果函数是 private 私有函数，影响范围有限，或者拆分之后的两个函数经常同时被调用，我们可以酌情考虑保留标识参数。示例代码如下所示：\n\n```java\n\n// 拆分成两个函数的调用方式\nboolean isVip = false;\n//...省略其他逻辑...\nif (isVip) {\n  buyCourseForVip(userId, courseId);\n} else {\n  buyCourse(userId, courseId);\n}\n\n// 保留标识参数的调用方式更加简洁\nboolean isVip = false;\n//...省略其他逻辑...\nbuyCourse(userId, courseId, isVip);\n```\n\n除了布尔类型作为标识参数来控制逻辑的情况外，还有一种“根据参数是否为 null”来控制逻辑的情况。针对这种情况，我们也应该将其拆分成多个函数。拆分之后的函数职责更明确，不容易用错。具体代码示例如下所示：\n\n```java\n\npublic List<Transaction> selectTransactions(Long userId, Date startDate, Date endDate) {\n  if (startDate != null && endDate != null) {\n    // 查询两个时间区间的transactions\n  }\n  if (startDate != null && endDate == null) {\n    // 查询startDate之后的所有transactions\n  }\n  if (startDate == null && endDate != null) {\n    // 查询endDate之前的所有transactions\n  }\n  if (startDate == null && endDate == null) {\n    // 查询所有的transactions\n  }\n}\n\n// 拆分成多个public函数，更加清晰、易用\npublic List<Transaction> selectTransactionsBetween(Long userId, Date startDate, Date endDate) {\n  return selectTransactions(userId, startDate, endDate);\n}\n\npublic List<Transaction> selectTransactionsStartWith(Long userId, Date startDate) {\n  return selectTransactions(userId, startDate, null);\n}\n\npublic List<Transaction> selectTransactionsEndWith(Long userId, Date endDate) {\n  return selectTransactions(userId, null, endDate);\n}\n\npublic List<Transaction> selectAllTransactions(Long userId) {\n  return selectTransactions(userId, null, null);\n}\n\nprivate List<Transaction> selectTransactions(Long userId, Date startDate, Date endDate) {\n  // ...\n}\n```\n\n\n\n## 4. 函数设计要职责单一。\n\n我们在前面讲到单一职责原则的时候，针对的是类、模块这样的应用对象。实际上，对于函数的设计来说，更要满足单一职责原则。相对于类和模块，函数的粒度比较小，代码行数少，所以在应用单一职责原则的时候，没有像应用到类或者模块那样模棱两可，能多单一就多单一。\n\n具体的代码示例如下所示：\n\n```java\n\npublic boolean checkUserIfExisting(String telephone, String username, String email)  { \n  if (!StringUtils.isBlank(telephone)) {\n    User user = userRepo.selectUserByTelephone(telephone);\n    return user != null;\n  }\n  \n  if (!StringUtils.isBlank(username)) {\n    User user = userRepo.selectUserByUsername(username);\n    return user != null;\n  }\n  \n  if (!StringUtils.isBlank(email)) {\n    User user = userRepo.selectUserByEmail(email);\n    return user != null;\n  }\n  \n  return false;\n}\n\n// 拆分成三个函数\npublic boolean checkUserIfExistingByTelephone(String telephone);\npublic boolean checkUserIfExistingByUsername(String username);\npublic boolean checkUserIfExistingByEmail(String email);\n```\n\n\n\n## 5. 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\n\n\n\n代码嵌套层次过深往往是因为 if-else、switch-case、for 循环过度嵌套导致的。我个人建议，嵌套最好不超过两层，超过两层之后就要思考一下是否可以减少嵌套。过深的嵌套本身理解起来就比较费劲，除此之外，嵌套过深很容易因为代码多次缩进，导致嵌套内部的语句超过一行的长度而折成两行，影响代码的整洁。解决嵌套过深的方法也比较成熟，有下面 4 种常见的思路。\n\n- 去掉多余的 if 或 else 语句。代码示例如下所示：\n\n  ```java\n  \n  // 示例一\n  public double caculateTotalAmount(List<Order> orders) {\n    if (orders == null || orders.isEmpty()) {\n      return 0.0;\n    } else { // 此处的else可以去掉\n      double amount = 0.0;\n      for (Order order : orders) {\n        if (order != null) {\n          amount += (order.getCount() * order.getPrice());\n        }\n      }\n      return amount;\n    }\n  }\n  \n  // 示例二\n  public List<String> matchStrings(List<String> strList,String substr) {\n    List<String> matchedStrings = new ArrayList<>();\n    if (strList != null && substr != null) {\n      for (String str : strList) {\n        if (str != null) { // 跟下面的if语句可以合并在一起\n          if (str.contains(substr)) {\n            matchedStrings.add(str);\n          }\n        }\n      }\n    }\n    return matchedStrings;\n  }\n  ```\n  \n- 调整执行顺序来减少嵌套。具体的代码示例如下所示：\n\n  ```java\n  \n  // 重构前的代码\n  public List<String> matchStrings(List<String> strList,String substr) {\n    List<String> matchedStrings = new ArrayList<>();\n    if (strList != null && substr != null) {\n      for (String str : strList) {\n        if (str != null) {\n          if (str.contains(substr)) {\n            matchedStrings.add(str);\n          }\n        }\n      }\n    }\n    return matchedStrings;\n  }\n  \n  // 重构后的代码：先执行判空逻辑，再执行正常逻辑\n  public List<String> matchStrings(List<String> strList,String substr) {\n    if (strList == null || substr == null) { //先判空\n      return Collections.emptyList();\n    }\n  \n    List<String> matchedStrings = new ArrayList<>();\n    for (String str : strList) {\n      if (str != null) {\n        if (str.contains(substr)) {\n          matchedStrings.add(str);\n        }\n      }\n    }\n    return matchedStrings;\n  }\n  ```\n- 将部分嵌套逻辑封装成函数调用，以此来减少嵌套。具体的代码示例如下所示：\n\n  ```java\n  \n  // 重构前的代码\n  public List<String> appendSalts(List<String> passwords) {\n    if (passwords == null || passwords.isEmpty()) {\n      return Collections.emptyList();\n    }\n    \n    List<String> passwordsWithSalt = new ArrayList<>();\n    for (String password : passwords) {\n      if (password == null) {\n        continue;\n      }\n      if (password.length() < 8) {\n        // ...\n      } else {\n        // ...\n      }\n    }\n    return passwordsWithSalt;\n  }\n  \n  // 重构后的代码：将部分逻辑抽成函数\n  public List<String> appendSalts(List<String> passwords) {\n    if (passwords == null || passwords.isEmpty()) {\n      return Collections.emptyList();\n    }\n  \n    List<String> passwordsWithSalt = new ArrayList<>();\n    for (String password : passwords) {\n      if (password == null) {\n        continue;\n      }\n      passwordsWithSalt.add(appendSalt(password));\n    }\n    return passwordsWithSalt;\n  }\n  \n  private String appendSalt(String password) {\n    String passwordWithSalt = password;\n    if (password.length() < 8) {\n      // ...\n    } else {\n      // ...\n    }\n    return passwordWithSalt;\n  }\n  ```\n\n  除此之外，常用的还有通过使用多态来替代 if-else、switch-case 条件判断的方法。这个思路涉及代码结构的改动。\n\n## 6. 用字面常量取代魔法数。\n\n常用的用解释性变量来提高代码的可读性的情况有下面 2 种.\n\n- 常量取代魔法数字。示例代码如下所示：\n\n  ```java\n  \n  public double CalculateCircularArea(double radius) {\n    return (3.1415) * radius * radius;\n  }\n  \n  // 常量替代魔法数字\n  public static final Double PI = 3.1415;\n  public double CalculateCircularArea(double radius) {\n    return PI * radius * radius;\n  }\n  ```\n\n- 使用解释性变量来解释复杂表达式。示例代码如下所示：\n\n  ```java\n  \n  if (date.after(SUMMER_START) && date.before(SUMMER_END)) {\n    // ...\n  } else {\n    // ...\n  }\n  \n  // 引入解释性变量后逻辑更加清晰\n  boolean isSummer = date.after(SUMMER_START)&&date.before(SUMMER_END);\n  if (isSummer) {\n    // ...\n  } else {\n    // ...\n  } \n  ```\n\n  \n\n## 7. 用解释性变量来解释复杂表达式，以此提高代码可读性。\n\n\nhttps://time.geekbang.org/column/article/188882\n\n\n\n# 其他《阿里 JAVA 规范》\n\n#  OOP 规约：\n\n## 1. 【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。\n\n\n\n> 说明：在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要\n>\n> 在<resultMap>设置从 is_xxx 到 xxx 的映射关系。\n>\n> 反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时\n>\n> 候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。\n\n## 2. 【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\n\n正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT\n\n反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD\n\n## 3. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。\n\n```java\n正例：\n// 这是示例注释，请注意在双斜线之后有一个空格\nString commentString = new String();\n```\n\n## 4.【强制】 POJO 类必须写 toString 方法。\n\n使用 IDE 中的工具：source> generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n\n说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。\n\n## 5. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n\n## 6. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\n\n反例：POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n\n## 7. 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：\n\n1） 不允许被继承的类，如：String 类。\n\n2） 不允许修改引用的域对象，如：POJO 类的域变量。 \n\n3） 不允许被覆写的方法，如：POJO 类的 setter 方法。\n\n4） 不允许运行过程中重新赋值的局部变量。 \n\n5） 避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。\n\n## 8. 【推荐】类成员与方法访问控制从严：\n\n1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。 \n\n2） 工具类不允许有 public 或 default 构造方法。\n\n3） 类非 static 成员变量并且与子类共享，必须是 protected。 \n\n4） 类非 static 成员变量并且仅在本类使用，必须是 private。\n\n5） 类 static 成员变量如果仅在本类使用，必须是 private。 \n\n6） 若是 static 成员变量，考虑是否为 final。 \n\n7） 类成员方法只供类内部调用，必须是 private。 \n\n8） 类成员方法只对继承类公开，那么限制为 protected。\n\n\n\n说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。\n\n思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。\n\n\n\n# 日期时间：\n\n## 1. 【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。\n\n说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。\n\n正例：表示日期和时间的格式如下所示：\n\n```java\nnew SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n```\n\n## 2. 【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。\n\n说明：日期格式中的这两对字母表意如下：\n\n1） 表示月份是大写的 M； \n\n2） 表示分钟则是小写的 m； \n\n3） 24 小时制的是大写的 H； \n\n4） 12 小时制的则是小写的 h。\n\n## 3. 【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值在 0-11 之间。\n\n说明：参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.\n\n正例： Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。\n\n\n\n# 集合处理：\n\n## 1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\n\n1） 只要覆写 equals，就必须覆写 hashCode。 \n\n2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。\n\n3） **如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。**\n\n说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。\n\n## 2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。\n\n说明：在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。\n\n正例：\n\n```java\nMap<String, Object> map = new HashMap<>(16);\n\nif(map.isEmpty()) {\n\t\tSystem.out.println(\"no element in this map.\");\n}\n```\n\n## 3.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。\n\n说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果为 null，则直接抛出异常。\n\n## 4.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。\n\n```java\n正例：\n\nList<String> list = new ArrayList<>();\n\nlist.add(\"1\");\n\nlist.add(\"2\");\n\nIterator<String> iterator = list.iterator();\n\nwhile (iterator.hasNext()) {\n\nString item = iterator.next();\n\nif (删除元素的条件) {\n\niterator.remove();\n  } \n}\n\n\n反例：\n\nfor (String item : list) {\n\nif (\"1\".equals(item)) {\n\nlist.remove(item);\n\n} \n\n}\n```\n\n说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？\n\n## 5. 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。\n\n说明：三个条件如下 \n\n1） x，y 的比较结果和 y，x 的比较结果相反。\n\n2） x > y，y > z，则 x > z。 \n\n3） x = y，则 x，z 比较结果和 y，z 比较结果相同。\n\n反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中\n\n可能会出现异常。\n\n```java\nnew Comparator<Student>() {\n@Override\npublic int compare(Student o1, Student o2) {\nreturn o1.getId() > o2.getId() ? 1 : -1; }\n};\n```\n\n## 6. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。\n\n说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的\n\nvalue。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用\n\nMap.forEach 方法。\n\n正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对\n\n象；entrySet()返回的是 K-V 值组合集合。\n\n7. ## 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n![image-20210428114518033](https://tva1.sinaimg.cn/large/008i3skNgy1gpzb9eujt3j30me07uq41.jpg)\n\n反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。\n\n\n\n#  前后端规约：\n\n## 1. 【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\n\n说明：\n\n1） 协议：生产环境必须使用 HTTPS。 \n\n2） 路径：每一个 API 需对应一个路径，表示 API 具体的请求地址：\n\n​\t\ta） 代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。\n\n​\t\tb） URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。\n\n​\t\tc） 路径禁止携带表示请求内容类型的后缀，比如\".json\",\".xml\"，通过 accept 头表达即可。\n\n3） 请求方法：对具体操作的定义，常见的请求方法如下：\n\n​\t\ta） GET：从服务器取出资源。\n\n​\t\tb） POST：在服务器新建一个资源。\n\n​\t\tc） PUT：在服务器更新资源。\n\n​\t\td） DELETE：从服务器删除资源。\n\n4） 请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。 \n\n5） 响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。\n\n## 2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。\n\n说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。\n\n\n\n## 3. 【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。\n\n说明：四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。 errorCode：参考**附表 3**。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏感数据信息。\n\n正例：常见的 HTTP 状态码如下\n\n1） 200 OK: 表明该请求被成功地完成，所请求的资源发送到客户端。\n\n2） 401 Unauthorized: 请求要求身份验证，常见对于需要登录而用户未登录的情况。\n\n3） 403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。\n\n4） 404 Not Found: 服务器无法取得所请求的网页，请求资源不存在。\n\n5） 500 Internal Server Error: 服务器内部错误。\n\n## 4. 【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用Long 类型。\n\n**说明**：Java 服务端如果直接返回 Long 整型数据给前端，JS 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 2 的 63 次方-1，在取值范围之内，超过 2 的 53 次 (9007199254740992)的数值转化为 JS 的 Number 时，有些数值会有精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。\n\n**反例**：通常在订单号或交易号大于等于 16 位，大概率会出现前后端单据不一致的情况，比如，\"orderId\": 362909601374617692，前端拿到的值却是: 362909601374617660。\n\n# 异常处理：\n\n## 1.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。\n\n说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。\n\n## 2. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\n\n1） 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。\n\n反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。 \n\n2） 数据库的查询结果可能为 null。 \n\n3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。 \n\n4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。 \n\n5） 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。\n\n6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。\n\n正例：使用 JDK8 的 Optional 类来防止 NPE 问题。\n\n## 3. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n\n\n\n## 4. 【参考】对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\n\n说明：关于 RPC 方法返回方式使用 Result 方式的理由：\n\n1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n\n2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n\n\n\n# 日志规约：\n\n## 1.【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\n\n说明：因为 String 字符串的拼接会使用 StringBuilder 的 append()方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。\n\n正例：logger.debug(\"Processing trade with id: {} and symbol: {}\", id, symbol);\n\n## 2.【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\n\n说明：国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。\n\n\n\n# 设计规约：\n\n## 1.【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\n\n说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 double check。\n\n正例：评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段）也需要进行评审通过后上线。\n\n## 2.【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。\n\n说明：时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。\n\n## 3.【推荐】类在设计与实现时要符合单一原则。\n\n说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。\n\n## 4.【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。\n\n说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。\n\n## 5.【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\n\n说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。\n\n## 6.【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\n\n说明：极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。\n\n## 7. 【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 DRY 原则（Don't Repeat Yourself）。\n\n说明：随着代码的重复次数不断增加，维护成本指数级上升。随意复制和粘贴代码，必然会导致代码的重复，在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。\n\n正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n\nprivate boolean checkParam(DTO dto) {...} \n\n## 8.【推荐】避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布。\n\n说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。\n\n反例：某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。\n\n## 9.【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\n\n说明：避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归档保存。\n\n## 10.【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\n\n说明：世间众多设计模式其实就是一种设计模式即隔离变化点的模式。\n\n正例：极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。\n\n## 11.【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\n\n说明：代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题是需要相应的文档来完整地呈现的。\n","source":"_posts/让你最快速地改善代码质量的20条编程规范.md","raw":"\n---\n\ntitle: 让你最快速地改善代码质量的20条编程规范\ndate: 2021-07-09 19:18:47\ntags:\n\n- 编程规范     \n\n- 设计模式之美\n\ncategories: 编程规范\n---\n\n\n> 根据学习根据极客时间 《设计模式之美》专栏 （王争 前Google工程师）和《阿里 java 规范》整理总结。\n>\n> 分别介绍编码规范的三个部分：命名与注释（Naming and Comments）、代码风格（Code Style）和编程技巧（Coding Tips）。\n\n\n##  关于命名\n\n- 命名的关键是能准确达意。对于不同作用域的命名，我们可以适当地选择不同的长度。作用域小的变量（比如临时变量），可以适当地选择短一些的命名方式。除此之外，命名中也可以使用一些耳熟能详的缩写。\n- 我们可以借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。\n- 命名要可读、可搜索。不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范，不要用些反直觉的命名。\n- 接口有两种命名方式：一种是在接口中带前缀“I”；另一种是在接口的实现类中带后缀“Impl”。对于抽象类的命名，也有两种方式，一种是带上前缀“Abstract”，一种是不带前缀。这两种命名方式都可以，关键是要在项目中统一。\n\n## 关于注释\n\n- 注释的目的就是让代码更容易看懂。只要符合这个要求的内容，你就可以将它写到注释里。总结一下，注释的内容主要包含这样三个方面：做什么、为什么、怎么做。对于一些复杂的类和接口，我们可能还需要写明“如何用”。\n- 注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写得尽可能全面、详细，而函数内部的注释要相对少一些，一般都是靠好的命名、提炼函数、解释性变量、总结性注释来提高代码可读性。\n\n## 补充：\n\n开发前，我一般先写注释，再写代码。比如写一个方法，我会先拆分业务逻辑，把注释给写上。后面再看注释，写代码。\n\n```java\n// todo \npublic void createOrder(RequestVo request) {\n  // todo 校验用户登录\n  // todo 校验商品\n  // todo 创建订单\n  // todo 拼装、返回结果集\n}\n```\n\n关于注释：之前我的看法只要逻辑清晰命名准确达意就不用写注释了，现在回过来想这个问题，代码是需要不断维护的，即使当时你思路清晰那么过了一段时间后还能那么清晰么。人的大脑只会记住关键的信息，那么注释就是帮助我们梳理自己的想法和逻辑沉淀下来，是百利无害的事情，当别人接手也能迅速理解，降低沟通成本。如何注释才是好的注释呢？文中提到三点：做什么、为什么做、怎么做、怎么用（API）。这里最重要的事做什么，。我再补充一点，可以加下使用场景或者业务场景。\n\n关于命名：这点我基本无疑义，总结下来就是两点：简洁达意和风格统一。\n\n# 理论五：让你最快速地改善代码质量的20条编程规范（中）\n\n## 1 函数、类多大才合适？\n\n函数的代码行数不要超过一屏幕的大小，比如 50 行。类的大小限制比较难确定。\n\n## 2.一行代码多长最合适？\n\n最好不要超过 IDE 显示的宽度。当然，限制也不能太小，太小会导致很多稍微长点的语句被折成两行，也会影响到代码的整洁，不利于阅读。\n\n## 3. 善用空行分割单元块\n\n对于比较长的函数，为了让逻辑更加清晰，可以使用空行来分割各个代码块。在类内部，成员变量与函数之间、静态成员变量与普通成员变量之间、函数之间，甚至成员变量之间，都可以通过添加空行的方式，让不同模块的代码之间的界限更加明确。\n\n## 4. 四格缩进还是两格缩进？\n\n我个人比较推荐使用两格缩进，这样可以节省空间，特别是在代码嵌套层次比较深的情况下。除此之外，值得强调的是，不管是用两格缩进还是四格缩进，一定不要用 tab 键缩进。\n\n## 5. 大括号是否要另起一行？\n\n我个人还是比较推荐将大括号放到跟上一条语句同一行的风格，这样可以节省代码行数。但是，将大括号另起一行，也有它的优势，那就是，左右括号可以垂直对齐，哪些代码属于哪一个代码块，更加一目了然。\n\n## 6. 类中成员的排列顺序\n\n在 Google Java 编程规范中，依赖类按照字母序从小到大排列。类中先写成员变量后写函数。成员变量之间或函数之间，先写静态成员变量或函数，后写普通变量或函数，并且按照作用域大小依次排列。\n\n\n\n# 关于编码技巧\n\n## 1. 将复杂的逻辑提炼拆分成函数和类。\n\n## 2. 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\n\n​\t\t我个人觉得，函数包含 3、4 个参数的时候还是能接受的，大于等于 5 个的时候，我们就觉得参数有点过多了，会影响到代码的可读性，使用起来也不方便。针对参数过多的情况，一般有 2 种处理方法。\n\n- 考虑函数是否职责单一，是否能通过拆分成多个函数的方式来减少参数。示例代码如下所示：\n\n  ```java\n  public User getUser(String username, String telephone, String email);\n  \n  // 拆分成多个函数\n  public User getUserByUsername(String username);\n  public User getUserByTelephone(String telephone);\n  public User getUserByEmail(String email);\n  ```\n\n- 将函数的参数封装成对象。示例代码如下所示：\n\n    ```java\n    \n    public void postBlog(String title, String summary, String keywords, String content, String category, long authorId);\n    \n    // 将参数封装成对象\n    public class Blog {\n      private String title;\n      private String summary;\n      private String keywords;\n      private Strint content;\n      private String category;\n      private long authorId;\n    }\n    public void postBlog(Blog blog);\n    ```\n\n    \n\n## 3. 函数中不要使用参数来做代码执行逻辑的控制。\n\n不要在函数中使用布尔类型的标识参数来控制内部逻辑，true 的时候走这块逻辑，false 的时候走另一块逻辑。这明显违背了单一职责原则和接口隔离原则。我建议将其拆成两个函数，可读性上也要更好。我举个例子来说明一下。\n\n```java\n// 将其拆分成两个函数\npublic void buyCourse(long userId, long courseId);\npublic void buyCourseForVip(long userId, long courseId);\n```\n\n不过，如果函数是 private 私有函数，影响范围有限，或者拆分之后的两个函数经常同时被调用，我们可以酌情考虑保留标识参数。示例代码如下所示：\n\n```java\n\n// 拆分成两个函数的调用方式\nboolean isVip = false;\n//...省略其他逻辑...\nif (isVip) {\n  buyCourseForVip(userId, courseId);\n} else {\n  buyCourse(userId, courseId);\n}\n\n// 保留标识参数的调用方式更加简洁\nboolean isVip = false;\n//...省略其他逻辑...\nbuyCourse(userId, courseId, isVip);\n```\n\n除了布尔类型作为标识参数来控制逻辑的情况外，还有一种“根据参数是否为 null”来控制逻辑的情况。针对这种情况，我们也应该将其拆分成多个函数。拆分之后的函数职责更明确，不容易用错。具体代码示例如下所示：\n\n```java\n\npublic List<Transaction> selectTransactions(Long userId, Date startDate, Date endDate) {\n  if (startDate != null && endDate != null) {\n    // 查询两个时间区间的transactions\n  }\n  if (startDate != null && endDate == null) {\n    // 查询startDate之后的所有transactions\n  }\n  if (startDate == null && endDate != null) {\n    // 查询endDate之前的所有transactions\n  }\n  if (startDate == null && endDate == null) {\n    // 查询所有的transactions\n  }\n}\n\n// 拆分成多个public函数，更加清晰、易用\npublic List<Transaction> selectTransactionsBetween(Long userId, Date startDate, Date endDate) {\n  return selectTransactions(userId, startDate, endDate);\n}\n\npublic List<Transaction> selectTransactionsStartWith(Long userId, Date startDate) {\n  return selectTransactions(userId, startDate, null);\n}\n\npublic List<Transaction> selectTransactionsEndWith(Long userId, Date endDate) {\n  return selectTransactions(userId, null, endDate);\n}\n\npublic List<Transaction> selectAllTransactions(Long userId) {\n  return selectTransactions(userId, null, null);\n}\n\nprivate List<Transaction> selectTransactions(Long userId, Date startDate, Date endDate) {\n  // ...\n}\n```\n\n\n\n## 4. 函数设计要职责单一。\n\n我们在前面讲到单一职责原则的时候，针对的是类、模块这样的应用对象。实际上，对于函数的设计来说，更要满足单一职责原则。相对于类和模块，函数的粒度比较小，代码行数少，所以在应用单一职责原则的时候，没有像应用到类或者模块那样模棱两可，能多单一就多单一。\n\n具体的代码示例如下所示：\n\n```java\n\npublic boolean checkUserIfExisting(String telephone, String username, String email)  { \n  if (!StringUtils.isBlank(telephone)) {\n    User user = userRepo.selectUserByTelephone(telephone);\n    return user != null;\n  }\n  \n  if (!StringUtils.isBlank(username)) {\n    User user = userRepo.selectUserByUsername(username);\n    return user != null;\n  }\n  \n  if (!StringUtils.isBlank(email)) {\n    User user = userRepo.selectUserByEmail(email);\n    return user != null;\n  }\n  \n  return false;\n}\n\n// 拆分成三个函数\npublic boolean checkUserIfExistingByTelephone(String telephone);\npublic boolean checkUserIfExistingByUsername(String username);\npublic boolean checkUserIfExistingByEmail(String email);\n```\n\n\n\n## 5. 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\n\n\n\n代码嵌套层次过深往往是因为 if-else、switch-case、for 循环过度嵌套导致的。我个人建议，嵌套最好不超过两层，超过两层之后就要思考一下是否可以减少嵌套。过深的嵌套本身理解起来就比较费劲，除此之外，嵌套过深很容易因为代码多次缩进，导致嵌套内部的语句超过一行的长度而折成两行，影响代码的整洁。解决嵌套过深的方法也比较成熟，有下面 4 种常见的思路。\n\n- 去掉多余的 if 或 else 语句。代码示例如下所示：\n\n  ```java\n  \n  // 示例一\n  public double caculateTotalAmount(List<Order> orders) {\n    if (orders == null || orders.isEmpty()) {\n      return 0.0;\n    } else { // 此处的else可以去掉\n      double amount = 0.0;\n      for (Order order : orders) {\n        if (order != null) {\n          amount += (order.getCount() * order.getPrice());\n        }\n      }\n      return amount;\n    }\n  }\n  \n  // 示例二\n  public List<String> matchStrings(List<String> strList,String substr) {\n    List<String> matchedStrings = new ArrayList<>();\n    if (strList != null && substr != null) {\n      for (String str : strList) {\n        if (str != null) { // 跟下面的if语句可以合并在一起\n          if (str.contains(substr)) {\n            matchedStrings.add(str);\n          }\n        }\n      }\n    }\n    return matchedStrings;\n  }\n  ```\n  \n- 调整执行顺序来减少嵌套。具体的代码示例如下所示：\n\n  ```java\n  \n  // 重构前的代码\n  public List<String> matchStrings(List<String> strList,String substr) {\n    List<String> matchedStrings = new ArrayList<>();\n    if (strList != null && substr != null) {\n      for (String str : strList) {\n        if (str != null) {\n          if (str.contains(substr)) {\n            matchedStrings.add(str);\n          }\n        }\n      }\n    }\n    return matchedStrings;\n  }\n  \n  // 重构后的代码：先执行判空逻辑，再执行正常逻辑\n  public List<String> matchStrings(List<String> strList,String substr) {\n    if (strList == null || substr == null) { //先判空\n      return Collections.emptyList();\n    }\n  \n    List<String> matchedStrings = new ArrayList<>();\n    for (String str : strList) {\n      if (str != null) {\n        if (str.contains(substr)) {\n          matchedStrings.add(str);\n        }\n      }\n    }\n    return matchedStrings;\n  }\n  ```\n- 将部分嵌套逻辑封装成函数调用，以此来减少嵌套。具体的代码示例如下所示：\n\n  ```java\n  \n  // 重构前的代码\n  public List<String> appendSalts(List<String> passwords) {\n    if (passwords == null || passwords.isEmpty()) {\n      return Collections.emptyList();\n    }\n    \n    List<String> passwordsWithSalt = new ArrayList<>();\n    for (String password : passwords) {\n      if (password == null) {\n        continue;\n      }\n      if (password.length() < 8) {\n        // ...\n      } else {\n        // ...\n      }\n    }\n    return passwordsWithSalt;\n  }\n  \n  // 重构后的代码：将部分逻辑抽成函数\n  public List<String> appendSalts(List<String> passwords) {\n    if (passwords == null || passwords.isEmpty()) {\n      return Collections.emptyList();\n    }\n  \n    List<String> passwordsWithSalt = new ArrayList<>();\n    for (String password : passwords) {\n      if (password == null) {\n        continue;\n      }\n      passwordsWithSalt.add(appendSalt(password));\n    }\n    return passwordsWithSalt;\n  }\n  \n  private String appendSalt(String password) {\n    String passwordWithSalt = password;\n    if (password.length() < 8) {\n      // ...\n    } else {\n      // ...\n    }\n    return passwordWithSalt;\n  }\n  ```\n\n  除此之外，常用的还有通过使用多态来替代 if-else、switch-case 条件判断的方法。这个思路涉及代码结构的改动。\n\n## 6. 用字面常量取代魔法数。\n\n常用的用解释性变量来提高代码的可读性的情况有下面 2 种.\n\n- 常量取代魔法数字。示例代码如下所示：\n\n  ```java\n  \n  public double CalculateCircularArea(double radius) {\n    return (3.1415) * radius * radius;\n  }\n  \n  // 常量替代魔法数字\n  public static final Double PI = 3.1415;\n  public double CalculateCircularArea(double radius) {\n    return PI * radius * radius;\n  }\n  ```\n\n- 使用解释性变量来解释复杂表达式。示例代码如下所示：\n\n  ```java\n  \n  if (date.after(SUMMER_START) && date.before(SUMMER_END)) {\n    // ...\n  } else {\n    // ...\n  }\n  \n  // 引入解释性变量后逻辑更加清晰\n  boolean isSummer = date.after(SUMMER_START)&&date.before(SUMMER_END);\n  if (isSummer) {\n    // ...\n  } else {\n    // ...\n  } \n  ```\n\n  \n\n## 7. 用解释性变量来解释复杂表达式，以此提高代码可读性。\n\n\nhttps://time.geekbang.org/column/article/188882\n\n\n\n# 其他《阿里 JAVA 规范》\n\n#  OOP 规约：\n\n## 1. 【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。\n\n\n\n> 说明：在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要\n>\n> 在<resultMap>设置从 is_xxx 到 xxx 的映射关系。\n>\n> 反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时\n>\n> 候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。\n\n## 2. 【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\n\n正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT\n\n反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD\n\n## 3. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。\n\n```java\n正例：\n// 这是示例注释，请注意在双斜线之后有一个空格\nString commentString = new String();\n```\n\n## 4.【强制】 POJO 类必须写 toString 方法。\n\n使用 IDE 中的工具：source> generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。\n\n说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。\n\n## 5. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\n\n## 6. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\n\n反例：POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。\n\n## 7. 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：\n\n1） 不允许被继承的类，如：String 类。\n\n2） 不允许修改引用的域对象，如：POJO 类的域变量。 \n\n3） 不允许被覆写的方法，如：POJO 类的 setter 方法。\n\n4） 不允许运行过程中重新赋值的局部变量。 \n\n5） 避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。\n\n## 8. 【推荐】类成员与方法访问控制从严：\n\n1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。 \n\n2） 工具类不允许有 public 或 default 构造方法。\n\n3） 类非 static 成员变量并且与子类共享，必须是 protected。 \n\n4） 类非 static 成员变量并且仅在本类使用，必须是 private。\n\n5） 类 static 成员变量如果仅在本类使用，必须是 private。 \n\n6） 若是 static 成员变量，考虑是否为 final。 \n\n7） 类成员方法只供类内部调用，必须是 private。 \n\n8） 类成员方法只对继承类公开，那么限制为 protected。\n\n\n\n说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。\n\n思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。\n\n\n\n# 日期时间：\n\n## 1. 【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。\n\n说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。\n\n正例：表示日期和时间的格式如下所示：\n\n```java\nnew SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\n```\n\n## 2. 【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。\n\n说明：日期格式中的这两对字母表意如下：\n\n1） 表示月份是大写的 M； \n\n2） 表示分钟则是小写的 m； \n\n3） 24 小时制的是大写的 H； \n\n4） 12 小时制的则是小写的 h。\n\n## 3. 【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值在 0-11 之间。\n\n说明：参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.\n\n正例： Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。\n\n\n\n# 集合处理：\n\n## 1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\n\n1） 只要覆写 equals，就必须覆写 hashCode。 \n\n2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。\n\n3） **如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。**\n\n说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。\n\n## 2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。\n\n说明：在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。\n\n正例：\n\n```java\nMap<String, Object> map = new HashMap<>(16);\n\nif(map.isEmpty()) {\n\t\tSystem.out.println(\"no element in this map.\");\n}\n```\n\n## 3.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。\n\n说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果为 null，则直接抛出异常。\n\n## 4.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。\n\n```java\n正例：\n\nList<String> list = new ArrayList<>();\n\nlist.add(\"1\");\n\nlist.add(\"2\");\n\nIterator<String> iterator = list.iterator();\n\nwhile (iterator.hasNext()) {\n\nString item = iterator.next();\n\nif (删除元素的条件) {\n\niterator.remove();\n  } \n}\n\n\n反例：\n\nfor (String item : list) {\n\nif (\"1\".equals(item)) {\n\nlist.remove(item);\n\n} \n\n}\n```\n\n说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？\n\n## 5. 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。\n\n说明：三个条件如下 \n\n1） x，y 的比较结果和 y，x 的比较结果相反。\n\n2） x > y，y > z，则 x > z。 \n\n3） x = y，则 x，z 比较结果和 y，z 比较结果相同。\n\n反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中\n\n可能会出现异常。\n\n```java\nnew Comparator<Student>() {\n@Override\npublic int compare(Student o1, Student o2) {\nreturn o1.getId() > o2.getId() ? 1 : -1; }\n};\n```\n\n## 6. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。\n\n说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的\n\nvalue。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用\n\nMap.forEach 方法。\n\n正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对\n\n象；entrySet()返回的是 K-V 值组合集合。\n\n7. ## 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\n\n![image-20210428114518033](https://tva1.sinaimg.cn/large/008i3skNgy1gpzb9eujt3j30me07uq41.jpg)\n\n反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。\n\n\n\n#  前后端规约：\n\n## 1. 【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\n\n说明：\n\n1） 协议：生产环境必须使用 HTTPS。 \n\n2） 路径：每一个 API 需对应一个路径，表示 API 具体的请求地址：\n\n​\t\ta） 代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。\n\n​\t\tb） URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。\n\n​\t\tc） 路径禁止携带表示请求内容类型的后缀，比如\".json\",\".xml\"，通过 accept 头表达即可。\n\n3） 请求方法：对具体操作的定义，常见的请求方法如下：\n\n​\t\ta） GET：从服务器取出资源。\n\n​\t\tb） POST：在服务器新建一个资源。\n\n​\t\tc） PUT：在服务器更新资源。\n\n​\t\td） DELETE：从服务器删除资源。\n\n4） 请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。 \n\n5） 响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。\n\n## 2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。\n\n说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。\n\n\n\n## 3. 【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。\n\n说明：四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。 errorCode：参考**附表 3**。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏感数据信息。\n\n正例：常见的 HTTP 状态码如下\n\n1） 200 OK: 表明该请求被成功地完成，所请求的资源发送到客户端。\n\n2） 401 Unauthorized: 请求要求身份验证，常见对于需要登录而用户未登录的情况。\n\n3） 403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。\n\n4） 404 Not Found: 服务器无法取得所请求的网页，请求资源不存在。\n\n5） 500 Internal Server Error: 服务器内部错误。\n\n## 4. 【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用Long 类型。\n\n**说明**：Java 服务端如果直接返回 Long 整型数据给前端，JS 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 2 的 63 次方-1，在取值范围之内，超过 2 的 53 次 (9007199254740992)的数值转化为 JS 的 Number 时，有些数值会有精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。\n\n**反例**：通常在订单号或交易号大于等于 16 位，大概率会出现前后端单据不一致的情况，比如，\"orderId\": 362909601374617692，前端拿到的值却是: 362909601374617660。\n\n# 异常处理：\n\n## 1.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。\n\n说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。\n\n## 2. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\n\n1） 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。\n\n反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。 \n\n2） 数据库的查询结果可能为 null。 \n\n3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。 \n\n4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。 \n\n5） 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。\n\n6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。\n\n正例：使用 JDK8 的 Optional 类来防止 NPE 问题。\n\n## 3. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\n\n\n\n## 4. 【参考】对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\n\n说明：关于 RPC 方法返回方式使用 Result 方式的理由：\n\n1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。\n\n2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。\n\n\n\n# 日志规约：\n\n## 1.【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\n\n说明：因为 String 字符串的拼接会使用 StringBuilder 的 append()方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。\n\n正例：logger.debug(\"Processing trade with id: {} and symbol: {}\", id, symbol);\n\n## 2.【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\n\n说明：国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。\n\n\n\n# 设计规约：\n\n## 1.【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\n\n说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 double check。\n\n正例：评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段）也需要进行评审通过后上线。\n\n## 2.【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。\n\n说明：时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。\n\n## 3.【推荐】类在设计与实现时要符合单一原则。\n\n说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。\n\n## 4.【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。\n\n说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。\n\n## 5.【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\n\n说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。\n\n## 6.【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\n\n说明：极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。\n\n## 7. 【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 DRY 原则（Don't Repeat Yourself）。\n\n说明：随着代码的重复次数不断增加，维护成本指数级上升。随意复制和粘贴代码，必然会导致代码的重复，在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。\n\n正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：\n\nprivate boolean checkParam(DTO dto) {...} \n\n## 8.【推荐】避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布。\n\n说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。\n\n反例：某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。\n\n## 9.【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\n\n说明：避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归档保存。\n\n## 10.【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\n\n说明：世间众多设计模式其实就是一种设计模式即隔离变化点的模式。\n\n正例：极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。\n\n## 11.【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\n\n说明：代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题是需要相应的文档来完整地呈现的。\n","slug":"让你最快速地改善代码质量的20条编程规范","published":1,"updated":"2021-07-09T11:21:02.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr2xqjq00004p61of2ee93m2","content":"<blockquote>\n<p>根据学习根据极客时间 《设计模式之美》专栏 （王争 前Google工程师）和《阿里 java 规范》整理总结。</p>\n<p>分别介绍编码规范的三个部分：命名与注释（Naming and Comments）、代码风格（Code Style）和编程技巧（Coding Tips）。</p>\n</blockquote>\n<h2 id=\"关于命名\"><a href=\"#关于命名\" class=\"headerlink\" title=\"关于命名\"></a>关于命名</h2><ul>\n<li>命名的关键是能准确达意。对于不同作用域的命名，我们可以适当地选择不同的长度。作用域小的变量（比如临时变量），可以适当地选择短一些的命名方式。除此之外，命名中也可以使用一些耳熟能详的缩写。</li>\n<li>我们可以借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。</li>\n<li>命名要可读、可搜索。不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范，不要用些反直觉的命名。</li>\n<li>接口有两种命名方式：一种是在接口中带前缀“I”；另一种是在接口的实现类中带后缀“Impl”。对于抽象类的命名，也有两种方式，一种是带上前缀“Abstract”，一种是不带前缀。这两种命名方式都可以，关键是要在项目中统一。</li>\n</ul>\n<h2 id=\"关于注释\"><a href=\"#关于注释\" class=\"headerlink\" title=\"关于注释\"></a>关于注释</h2><ul>\n<li>注释的目的就是让代码更容易看懂。只要符合这个要求的内容，你就可以将它写到注释里。总结一下，注释的内容主要包含这样三个方面：做什么、为什么、怎么做。对于一些复杂的类和接口，我们可能还需要写明“如何用”。</li>\n<li>注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写得尽可能全面、详细，而函数内部的注释要相对少一些，一般都是靠好的命名、提炼函数、解释性变量、总结性注释来提高代码可读性。</li>\n</ul>\n<h2 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h2><p>开发前，我一般先写注释，再写代码。比如写一个方法，我会先拆分业务逻辑，把注释给写上。后面再看注释，写代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todo </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createOrder</span><span class=\"params\">(RequestVo request)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo 校验用户登录</span></span><br><span class=\"line\">  <span class=\"comment\">// todo 校验商品</span></span><br><span class=\"line\">  <span class=\"comment\">// todo 创建订单</span></span><br><span class=\"line\">  <span class=\"comment\">// todo 拼装、返回结果集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于注释：之前我的看法只要逻辑清晰命名准确达意就不用写注释了，现在回过来想这个问题，代码是需要不断维护的，即使当时你思路清晰那么过了一段时间后还能那么清晰么。人的大脑只会记住关键的信息，那么注释就是帮助我们梳理自己的想法和逻辑沉淀下来，是百利无害的事情，当别人接手也能迅速理解，降低沟通成本。如何注释才是好的注释呢？文中提到三点：做什么、为什么做、怎么做、怎么用（API）。这里最重要的事做什么，。我再补充一点，可以加下使用场景或者业务场景。</p>\n<p>关于命名：这点我基本无疑义，总结下来就是两点：简洁达意和风格统一。</p>\n<h1 id=\"理论五：让你最快速地改善代码质量的20条编程规范（中）\"><a href=\"#理论五：让你最快速地改善代码质量的20条编程规范（中）\" class=\"headerlink\" title=\"理论五：让你最快速地改善代码质量的20条编程规范（中）\"></a>理论五：让你最快速地改善代码质量的20条编程规范（中）</h1><h2 id=\"1-函数、类多大才合适？\"><a href=\"#1-函数、类多大才合适？\" class=\"headerlink\" title=\"1 函数、类多大才合适？\"></a>1 函数、类多大才合适？</h2><p>函数的代码行数不要超过一屏幕的大小，比如 50 行。类的大小限制比较难确定。</p>\n<h2 id=\"2-一行代码多长最合适？\"><a href=\"#2-一行代码多长最合适？\" class=\"headerlink\" title=\"2.一行代码多长最合适？\"></a>2.一行代码多长最合适？</h2><p>最好不要超过 IDE 显示的宽度。当然，限制也不能太小，太小会导致很多稍微长点的语句被折成两行，也会影响到代码的整洁，不利于阅读。</p>\n<h2 id=\"3-善用空行分割单元块\"><a href=\"#3-善用空行分割单元块\" class=\"headerlink\" title=\"3. 善用空行分割单元块\"></a>3. 善用空行分割单元块</h2><p>对于比较长的函数，为了让逻辑更加清晰，可以使用空行来分割各个代码块。在类内部，成员变量与函数之间、静态成员变量与普通成员变量之间、函数之间，甚至成员变量之间，都可以通过添加空行的方式，让不同模块的代码之间的界限更加明确。</p>\n<h2 id=\"4-四格缩进还是两格缩进？\"><a href=\"#4-四格缩进还是两格缩进？\" class=\"headerlink\" title=\"4. 四格缩进还是两格缩进？\"></a>4. 四格缩进还是两格缩进？</h2><p>我个人比较推荐使用两格缩进，这样可以节省空间，特别是在代码嵌套层次比较深的情况下。除此之外，值得强调的是，不管是用两格缩进还是四格缩进，一定不要用 tab 键缩进。</p>\n<h2 id=\"5-大括号是否要另起一行？\"><a href=\"#5-大括号是否要另起一行？\" class=\"headerlink\" title=\"5. 大括号是否要另起一行？\"></a>5. 大括号是否要另起一行？</h2><p>我个人还是比较推荐将大括号放到跟上一条语句同一行的风格，这样可以节省代码行数。但是，将大括号另起一行，也有它的优势，那就是，左右括号可以垂直对齐，哪些代码属于哪一个代码块，更加一目了然。</p>\n<h2 id=\"6-类中成员的排列顺序\"><a href=\"#6-类中成员的排列顺序\" class=\"headerlink\" title=\"6. 类中成员的排列顺序\"></a>6. 类中成员的排列顺序</h2><p>在 Google Java 编程规范中，依赖类按照字母序从小到大排列。类中先写成员变量后写函数。成员变量之间或函数之间，先写静态成员变量或函数，后写普通变量或函数，并且按照作用域大小依次排列。</p>\n<h1 id=\"关于编码技巧\"><a href=\"#关于编码技巧\" class=\"headerlink\" title=\"关于编码技巧\"></a>关于编码技巧</h1><h2 id=\"1-将复杂的逻辑提炼拆分成函数和类。\"><a href=\"#1-将复杂的逻辑提炼拆分成函数和类。\" class=\"headerlink\" title=\"1. 将复杂的逻辑提炼拆分成函数和类。\"></a>1. 将复杂的逻辑提炼拆分成函数和类。</h2><h2 id=\"2-通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\"><a href=\"#2-通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\" class=\"headerlink\" title=\"2. 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\"></a>2. 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。</h2><p>​        我个人觉得，函数包含 3、4 个参数的时候还是能接受的，大于等于 5 个的时候，我们就觉得参数有点过多了，会影响到代码的可读性，使用起来也不方便。针对参数过多的情况，一般有 2 种处理方法。</p>\n<ul>\n<li><p>考虑函数是否职责单一，是否能通过拆分成多个函数的方式来减少参数。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">(String username, String telephone, String email)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成多个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserByUsername</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserByTelephone</span><span class=\"params\">(String telephone)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserByEmail</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>将函数的参数封装成对象。示例代码如下所示：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postBlog</span><span class=\"params\">(String title, String summary, String keywords, String content, String category, <span class=\"keyword\">long</span> authorId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将参数封装成对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blog</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String summary;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String keywords;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Strint content;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String category;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> authorId;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postBlog</span><span class=\"params\">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"3-函数中不要使用参数来做代码执行逻辑的控制。\"><a href=\"#3-函数中不要使用参数来做代码执行逻辑的控制。\" class=\"headerlink\" title=\"3. 函数中不要使用参数来做代码执行逻辑的控制。\"></a>3. 函数中不要使用参数来做代码执行逻辑的控制。</h2><p>不要在函数中使用布尔类型的标识参数来控制内部逻辑，true 的时候走这块逻辑，false 的时候走另一块逻辑。这明显违背了单一职责原则和接口隔离原则。我建议将其拆成两个函数，可读性上也要更好。我举个例子来说明一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将其拆分成两个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyCourse</span><span class=\"params\">(<span class=\"keyword\">long</span> userId, <span class=\"keyword\">long</span> courseId)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyCourseForVip</span><span class=\"params\">(<span class=\"keyword\">long</span> userId, <span class=\"keyword\">long</span> courseId)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>不过，如果函数是 private 私有函数，影响范围有限，或者拆分之后的两个函数经常同时被调用，我们可以酌情考虑保留标识参数。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成两个函数的调用方式</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isVip = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//...省略其他逻辑...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isVip) &#123;</span><br><span class=\"line\">  buyCourseForVip(userId, courseId);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  buyCourse(userId, courseId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保留标识参数的调用方式更加简洁</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isVip = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//...省略其他逻辑...</span></span><br><span class=\"line\">buyCourse(userId, courseId, isVip);</span><br></pre></td></tr></table></figure>\n\n<p>除了布尔类型作为标识参数来控制逻辑的情况外，还有一种“根据参数是否为 null”来控制逻辑的情况。针对这种情况，我们也应该将其拆分成多个函数。拆分之后的函数职责更明确，不容易用错。具体代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactions</span><span class=\"params\">(Long userId, Date startDate, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate != <span class=\"keyword\">null</span> &amp;&amp; endDate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询两个时间区间的transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate != <span class=\"keyword\">null</span> &amp;&amp; endDate == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询startDate之后的所有transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate == <span class=\"keyword\">null</span> &amp;&amp; endDate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询endDate之前的所有transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate == <span class=\"keyword\">null</span> &amp;&amp; endDate == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询所有的transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成多个public函数，更加清晰、易用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactionsBetween</span><span class=\"params\">(Long userId, Date startDate, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, startDate, endDate);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactionsStartWith</span><span class=\"params\">(Long userId, Date startDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, startDate, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactionsEndWith</span><span class=\"params\">(Long userId, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, <span class=\"keyword\">null</span>, endDate);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectAllTransactions</span><span class=\"params\">(Long userId)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactions</span><span class=\"params\">(Long userId, Date startDate, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-函数设计要职责单一。\"><a href=\"#4-函数设计要职责单一。\" class=\"headerlink\" title=\"4. 函数设计要职责单一。\"></a>4. 函数设计要职责单一。</h2><p>我们在前面讲到单一职责原则的时候，针对的是类、模块这样的应用对象。实际上，对于函数的设计来说，更要满足单一职责原则。相对于类和模块，函数的粒度比较小，代码行数少，所以在应用单一职责原则的时候，没有像应用到类或者模块那样模棱两可，能多单一就多单一。</p>\n<p>具体的代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExisting</span><span class=\"params\">(String telephone, String username, String email)</span>  </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!StringUtils.isBlank(telephone)) &#123;</span><br><span class=\"line\">    User user = userRepo.selectUserByTelephone(telephone);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!StringUtils.isBlank(username)) &#123;</span><br><span class=\"line\">    User user = userRepo.selectUserByUsername(username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!StringUtils.isBlank(email)) &#123;</span><br><span class=\"line\">    User user = userRepo.selectUserByEmail(email);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成三个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExistingByTelephone</span><span class=\"params\">(String telephone)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExistingByUsername</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExistingByEmail</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-移除过深的嵌套层次，方法包括：去掉多余的-if-或-else-语句，使用-continue、break、return-关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\"><a href=\"#5-移除过深的嵌套层次，方法包括：去掉多余的-if-或-else-语句，使用-continue、break、return-关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\" class=\"headerlink\" title=\"5. 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\"></a>5. 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。</h2><p>代码嵌套层次过深往往是因为 if-else、switch-case、for 循环过度嵌套导致的。我个人建议，嵌套最好不超过两层，超过两层之后就要思考一下是否可以减少嵌套。过深的嵌套本身理解起来就比较费劲，除此之外，嵌套过深很容易因为代码多次缩进，导致嵌套内部的语句超过一行的长度而折成两行，影响代码的整洁。解决嵌套过深的方法也比较成熟，有下面 4 种常见的思路。</p>\n<ul>\n<li><p>去掉多余的 if 或 else 语句。代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">caculateTotalAmount</span><span class=\"params\">(List&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (orders == <span class=\"keyword\">null</span> || orders.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 此处的else可以去掉</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> amount = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Order order : orders) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (order != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        amount += (order.getCount() * order.getPrice());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">matchStrings</span><span class=\"params\">(List&lt;String&gt; strList,String substr)</span> </span>&#123;</span><br><span class=\"line\">  List&lt;String&gt; matchedStrings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (strList != <span class=\"keyword\">null</span> &amp;&amp; substr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String str : strList) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 跟下面的if语句可以合并在一起</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.contains(substr)) &#123;</span><br><span class=\"line\">          matchedStrings.add(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matchedStrings;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>调整执行顺序来减少嵌套。具体的代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构前的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">matchStrings</span><span class=\"params\">(List&lt;String&gt; strList,String substr)</span> </span>&#123;</span><br><span class=\"line\">  List&lt;String&gt; matchedStrings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (strList != <span class=\"keyword\">null</span> &amp;&amp; substr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String str : strList) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.contains(substr)) &#123;</span><br><span class=\"line\">          matchedStrings.add(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matchedStrings;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构后的代码：先执行判空逻辑，再执行正常逻辑</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">matchStrings</span><span class=\"params\">(List&lt;String&gt; strList,String substr)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (strList == <span class=\"keyword\">null</span> || substr == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//先判空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;String&gt; matchedStrings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (String str : strList) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str.contains(substr)) &#123;</span><br><span class=\"line\">        matchedStrings.add(str);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matchedStrings;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>将部分嵌套逻辑封装成函数调用，以此来减少嵌套。具体的代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构前的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">appendSalts</span><span class=\"params\">(List&lt;String&gt; passwords)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (passwords == <span class=\"keyword\">null</span> || passwords.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  List&lt;String&gt; passwordsWithSalt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (String password : passwords) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password.length() &lt; <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> passwordsWithSalt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构后的代码：将部分逻辑抽成函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">appendSalts</span><span class=\"params\">(List&lt;String&gt; passwords)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (passwords == <span class=\"keyword\">null</span> || passwords.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;String&gt; passwordsWithSalt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (String password : passwords) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    passwordsWithSalt.add(appendSalt(password));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> passwordsWithSalt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">appendSalt</span><span class=\"params\">(String password)</span> </span>&#123;</span><br><span class=\"line\">  String passwordWithSalt = password;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (password.length() &lt; <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> passwordWithSalt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，常用的还有通过使用多态来替代 if-else、switch-case 条件判断的方法。这个思路涉及代码结构的改动。</p>\n</li>\n</ul>\n<h2 id=\"6-用字面常量取代魔法数。\"><a href=\"#6-用字面常量取代魔法数。\" class=\"headerlink\" title=\"6. 用字面常量取代魔法数。\"></a>6. 用字面常量取代魔法数。</h2><p>常用的用解释性变量来提高代码的可读性的情况有下面 2 种.</p>\n<ul>\n<li><p>常量取代魔法数字。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">CalculateCircularArea</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">3.1415</span>) * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常量替代魔法数字</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Double PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">CalculateCircularArea</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用解释性变量来解释复杂表达式。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (date.after(SUMMER_START) &amp;&amp; date.before(SUMMER_END)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入解释性变量后逻辑更加清晰</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isSummer = date.after(SUMMER_START)&amp;&amp;date.before(SUMMER_END);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSummer) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"7-用解释性变量来解释复杂表达式，以此提高代码可读性。\"><a href=\"#7-用解释性变量来解释复杂表达式，以此提高代码可读性。\" class=\"headerlink\" title=\"7. 用解释性变量来解释复杂表达式，以此提高代码可读性。\"></a>7. 用解释性变量来解释复杂表达式，以此提高代码可读性。</h2><p><a href=\"https://time.geekbang.org/column/article/188882\">https://time.geekbang.org/column/article/188882</a></p>\n<h1 id=\"其他《阿里-JAVA-规范》\"><a href=\"#其他《阿里-JAVA-规范》\" class=\"headerlink\" title=\"其他《阿里 JAVA 规范》\"></a>其他《阿里 JAVA 规范》</h1><h1 id=\"OOP-规约：\"><a href=\"#OOP-规约：\" class=\"headerlink\" title=\"OOP 规约：\"></a>OOP 规约：</h1><h2 id=\"1-【强制】POJO-类中的任何布尔类型的变量，都不要加-is-前缀，否则部分框架解析会引起序列化错误。\"><a href=\"#1-【强制】POJO-类中的任何布尔类型的变量，都不要加-is-前缀，否则部分框架解析会引起序列化错误。\" class=\"headerlink\" title=\"1. 【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。\"></a>1. 【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</h2><blockquote>\n<p>说明：在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要</p>\n<p>在<resultMap>设置从 is_xxx 到 xxx 的映射关系。</p>\n<p>反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时</p>\n<p>候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p>\n</blockquote>\n<h2 id=\"2-【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\"><a href=\"#2-【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\" class=\"headerlink\" title=\"2. 【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\"></a>2. 【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。</h2><p>正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT</p>\n<p>反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD</p>\n<h2 id=\"3-【强制】注释的双斜线与注释内容之间有且仅有一个空格。\"><a href=\"#3-【强制】注释的双斜线与注释内容之间有且仅有一个空格。\" class=\"headerlink\" title=\"3. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。\"></a>3. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"><span class=\"comment\">// 这是示例注释，请注意在双斜线之后有一个空格</span></span><br><span class=\"line\">String commentString = <span class=\"keyword\">new</span> String();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-【强制】-POJO-类必须写-toString-方法。\"><a href=\"#4-【强制】-POJO-类必须写-toString-方法。\" class=\"headerlink\" title=\"4.【强制】 POJO 类必须写 toString 方法。\"></a>4.【强制】 POJO 类必须写 toString 方法。</h2><p>使用 IDE 中的工具：source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>\n<p>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>\n<h2 id=\"5-【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在-init-方法中。\"><a href=\"#5-【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在-init-方法中。\" class=\"headerlink\" title=\"5. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\"></a>5. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</h2><h2 id=\"6-【强制】定义-DO-DTO-VO-等-POJO-类时，不要设定任何属性默认值。\"><a href=\"#6-【强制】定义-DO-DTO-VO-等-POJO-类时，不要设定任何属性默认值。\" class=\"headerlink\" title=\"6. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\"></a>6. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</h2><p>反例：POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n<h2 id=\"7-【推荐】final-可以声明类、成员变量、方法、以及本地变量，下列情况使用-final-关键字：\"><a href=\"#7-【推荐】final-可以声明类、成员变量、方法、以及本地变量，下列情况使用-final-关键字：\" class=\"headerlink\" title=\"7. 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：\"></a>7. 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</h2><p>1） 不允许被继承的类，如：String 类。</p>\n<p>2） 不允许修改引用的域对象，如：POJO 类的域变量。 </p>\n<p>3） 不允许被覆写的方法，如：POJO 类的 setter 方法。</p>\n<p>4） 不允许运行过程中重新赋值的局部变量。 </p>\n<p>5） 避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。</p>\n<h2 id=\"8-【推荐】类成员与方法访问控制从严：\"><a href=\"#8-【推荐】类成员与方法访问控制从严：\" class=\"headerlink\" title=\"8. 【推荐】类成员与方法访问控制从严：\"></a>8. 【推荐】类成员与方法访问控制从严：</h2><p>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。 </p>\n<p>2） 工具类不允许有 public 或 default 构造方法。</p>\n<p>3） 类非 static 成员变量并且与子类共享，必须是 protected。 </p>\n<p>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</p>\n<p>5） 类 static 成员变量如果仅在本类使用，必须是 private。 </p>\n<p>6） 若是 static 成员变量，考虑是否为 final。 </p>\n<p>7） 类成员方法只供类内部调用，必须是 private。 </p>\n<p>8） 类成员方法只对继承类公开，那么限制为 protected。</p>\n<p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p>\n<p>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p>\n<h1 id=\"日期时间：\"><a href=\"#日期时间：\" class=\"headerlink\" title=\"日期时间：\"></a>日期时间：</h1><h2 id=\"1-【强制】日期格式化时，传入-pattern-中表示年份统一使用小写的-y。\"><a href=\"#1-【强制】日期格式化时，传入-pattern-中表示年份统一使用小写的-y。\" class=\"headerlink\" title=\"1. 【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。\"></a>1. 【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</h2><p>说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。</p>\n<p>正例：表示日期和时间的格式如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-【强制】在日期格式中分清楚大写的-M-和小写的-m，大写的-H-和小写的-h-分别指代的意义。\"><a href=\"#2-【强制】在日期格式中分清楚大写的-M-和小写的-m，大写的-H-和小写的-h-分别指代的意义。\" class=\"headerlink\" title=\"2. 【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。\"></a>2. 【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</h2><p>说明：日期格式中的这两对字母表意如下：</p>\n<p>1） 表示月份是大写的 M； </p>\n<p>2） 表示分钟则是小写的 m； </p>\n<p>3） 24 小时制的是大写的 H； </p>\n<p>4） 12 小时制的则是小写的 h。</p>\n<h2 id=\"3-【推荐】使用枚举值来指代月份。如果使用数字，注意-Date，Calendar-等日期相关类的月份-month-取值在-0-11-之间。\"><a href=\"#3-【推荐】使用枚举值来指代月份。如果使用数字，注意-Date，Calendar-等日期相关类的月份-month-取值在-0-11-之间。\" class=\"headerlink\" title=\"3. 【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值在 0-11 之间。\"></a>3. 【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值在 0-11 之间。</h2><p>说明：参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.</p>\n<p>正例： Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。</p>\n<h1 id=\"集合处理：\"><a href=\"#集合处理：\" class=\"headerlink\" title=\"集合处理：\"></a>集合处理：</h1><h2 id=\"1-【强制】关于-hashCode-和-equals-的处理，遵循如下规则：\"><a href=\"#1-【强制】关于-hashCode-和-equals-的处理，遵循如下规则：\" class=\"headerlink\" title=\"1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\"></a>1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</h2><p>1） 只要覆写 equals，就必须覆写 hashCode。 </p>\n<p>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。</p>\n<p>3） <strong>如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</strong></p>\n<p>说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。</p>\n<h2 id=\"2-【强制】判断所有集合内部的元素是否为空，使用-isEmpty-方法，而不是-size-0-的方式。\"><a href=\"#2-【强制】判断所有集合内部的元素是否为空，使用-isEmpty-方法，而不是-size-0-的方式。\" class=\"headerlink\" title=\"2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。\"></a>2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。</h2><p>说明：在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。</p>\n<p>正例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.isEmpty()) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;no element in this map.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-【强制】在使用-Collection-接口任何实现类的-addAll-方法时，都要对输入的集合参数进行NPE-判断。\"><a href=\"#3-【强制】在使用-Collection-接口任何实现类的-addAll-方法时，都要对输入的集合参数进行NPE-判断。\" class=\"headerlink\" title=\"3.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。\"></a>3.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。</h2><p>说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果为 null，则直接抛出异常。</p>\n<h2 id=\"4-【强制】不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。\"><a href=\"#4-【强制】不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。\" class=\"headerlink\" title=\"4.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。\"></a>4.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">String item = iterator.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (删除元素的条件) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">iterator.remove();</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">反例：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String item : list) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;1&quot;</span>.equals(item)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">list.remove(item);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>\n<h2 id=\"5-【强制】在-JDK7-版本及以上，Comparator-实现类要满足如下三个条件，不然-Arrays-sort，Collections-sort-会抛-IllegalArgumentException-异常。\"><a href=\"#5-【强制】在-JDK7-版本及以上，Comparator-实现类要满足如下三个条件，不然-Arrays-sort，Collections-sort-会抛-IllegalArgumentException-异常。\" class=\"headerlink\" title=\"5. 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。\"></a>5. 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。</h2><p>说明：三个条件如下 </p>\n<p>1） x，y 的比较结果和 y，x 的比较结果相反。</p>\n<p>2） x &gt; y，y &gt; z，则 x &gt; z。 </p>\n<p>3） x = y，则 x，z 比较结果和 y，z 比较结果相同。</p>\n<p>反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中</p>\n<p>可能会出现异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> o1.getId() &gt; o2.getId() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-【推荐】使用-entrySet-遍历-Map-类集合-KV，而不是-keySet-方式进行遍历。\"><a href=\"#6-【推荐】使用-entrySet-遍历-Map-类集合-KV，而不是-keySet-方式进行遍历。\" class=\"headerlink\" title=\"6. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。\"></a>6. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</h2><p>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的</p>\n<p>value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用</p>\n<p>Map.forEach 方法。</p>\n<p>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对</p>\n<p>象；entrySet()返回的是 K-V 值组合集合。</p>\n<ol start=\"7\">\n<li><h2 id=\"【推荐】高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格：\"><a href=\"#【推荐】高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格：\" class=\"headerlink\" title=\"【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\"></a>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</h2></li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gpzb9eujt3j30me07uq41.jpg\" alt=\"image-20210428114518033\"></p>\n<p>反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</p>\n<h1 id=\"前后端规约：\"><a href=\"#前后端规约：\" class=\"headerlink\" title=\"前后端规约：\"></a>前后端规约：</h1><h2 id=\"1-【强制】前后端交互的-API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\"><a href=\"#1-【强制】前后端交互的-API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\" class=\"headerlink\" title=\"1. 【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\"></a>1. 【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。</h2><p>说明：</p>\n<p>1） 协议：生产环境必须使用 HTTPS。 </p>\n<p>2） 路径：每一个 API 需对应一个路径，表示 API 具体的请求地址：</p>\n<p>​        a） 代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。</p>\n<p>​        b） URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。</p>\n<p>​        c） 路径禁止携带表示请求内容类型的后缀，比如”.json”,”.xml”，通过 accept 头表达即可。</p>\n<p>3） 请求方法：对具体操作的定义，常见的请求方法如下：</p>\n<p>​        a） GET：从服务器取出资源。</p>\n<p>​        b） POST：在服务器新建一个资源。</p>\n<p>​        c） PUT：在服务器更新资源。</p>\n<p>​        d） DELETE：从服务器删除资源。</p>\n<p>4） 请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。 </p>\n<p>5） 响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。</p>\n<h2 id=\"2-【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组-或空集合-。\"><a href=\"#2-【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组-或空集合-。\" class=\"headerlink\" title=\"2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。\"></a>2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。</h2><p>说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</p>\n<h2 id=\"3-【强制】服务端发生错误时，返回给前端的响应信息必须包含-HTTP-状态码，errorCode、errorMessage、用户提示信息四个部分。\"><a href=\"#3-【强制】服务端发生错误时，返回给前端的响应信息必须包含-HTTP-状态码，errorCode、errorMessage、用户提示信息四个部分。\" class=\"headerlink\" title=\"3. 【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。\"></a>3. 【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。</h2><p>说明：四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。 errorCode：参考<strong>附表 3</strong>。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏感数据信息。</p>\n<p>正例：常见的 HTTP 状态码如下</p>\n<p>1） 200 OK: 表明该请求被成功地完成，所请求的资源发送到客户端。</p>\n<p>2） 401 Unauthorized: 请求要求身份验证，常见对于需要登录而用户未登录的情况。</p>\n<p>3） 403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。</p>\n<p>4） 404 Not Found: 服务器无法取得所请求的网页，请求资源不存在。</p>\n<p>5） 500 Internal Server Error: 服务器内部错误。</p>\n<h2 id=\"4-【强制】对于需要使用超大整数的场景，服务端一律使用-String-字符串类型返回，禁止使用Long-类型。\"><a href=\"#4-【强制】对于需要使用超大整数的场景，服务端一律使用-String-字符串类型返回，禁止使用Long-类型。\" class=\"headerlink\" title=\"4. 【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用Long 类型。\"></a>4. 【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用Long 类型。</h2><p><strong>说明</strong>：Java 服务端如果直接返回 Long 整型数据给前端，JS 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 2 的 63 次方-1，在取值范围之内，超过 2 的 53 次 (9007199254740992)的数值转化为 JS 的 Number 时，有些数值会有精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。</p>\n<p><strong>反例</strong>：通常在订单号或交易号大于等于 16 位，大概率会出现前后端单据不一致的情况，比如，”orderId”: 362909601374617692，前端拿到的值却是: 362909601374617660。</p>\n<h1 id=\"异常处理：\"><a href=\"#异常处理：\" class=\"headerlink\" title=\"异常处理：\"></a>异常处理：</h1><h2 id=\"1-【推荐】方法的返回值可以为-null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回-null-值。\"><a href=\"#1-【推荐】方法的返回值可以为-null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回-null-值。\" class=\"headerlink\" title=\"1.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。\"></a>1.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。</h2><p>说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。</p>\n<h2 id=\"2-【推荐】防止-NPE，是程序员的基本修养，注意-NPE-产生的场景：\"><a href=\"#2-【推荐】防止-NPE，是程序员的基本修养，注意-NPE-产生的场景：\" class=\"headerlink\" title=\"2. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\"></a>2. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</h2><p>1） 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。</p>\n<p>反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。 </p>\n<p>2） 数据库的查询结果可能为 null。 </p>\n<p>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。 </p>\n<p>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。 </p>\n<p>5） 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p>\n<p>6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p>\n<p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题。</p>\n<h2 id=\"3-【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\"><a href=\"#3-【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\" class=\"headerlink\" title=\"3. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\"></a>3. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</h2><h2 id=\"4-【参考】对于公司外的-http-api-开放接口必须使用-errorCode；而应用内部推荐异常抛出；跨应用间-RPC-调用优先考虑使用-Result-方式，封装-isSuccess-方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\"><a href=\"#4-【参考】对于公司外的-http-api-开放接口必须使用-errorCode；而应用内部推荐异常抛出；跨应用间-RPC-调用优先考虑使用-Result-方式，封装-isSuccess-方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\" class=\"headerlink\" title=\"4. 【参考】对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\"></a>4. 【参考】对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接抛出异常即可。</h2><p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：</p>\n<p>1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p>\n<p>2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p>\n<h1 id=\"日志规约：\"><a href=\"#日志规约：\" class=\"headerlink\" title=\"日志规约：\"></a>日志规约：</h1><h2 id=\"1-【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\"><a href=\"#1-【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\" class=\"headerlink\" title=\"1.【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\"></a>1.【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。</h2><p>说明：因为 String 字符串的拼接会使用 StringBuilder 的 append()方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。</p>\n<p>正例：logger.debug(“Processing trade with id: {} and symbol: {}”, id, symbol);</p>\n<h2 id=\"2-【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\"><a href=\"#2-【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\" class=\"headerlink\" title=\"2.【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\"></a>2.【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。</h2><p>说明：国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。</p>\n<h1 id=\"设计规约：\"><a href=\"#设计规约：\" class=\"headerlink\" title=\"设计规约：\"></a>设计规约：</h1><h2 id=\"1-【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\"><a href=\"#1-【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\" class=\"headerlink\" title=\"1.【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\"></a>1.【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。</h2><p>说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 double check。</p>\n<p>正例：评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段）也需要进行评审通过后上线。</p>\n<h2 id=\"2-【强制】如果系统中某个功能的调用链路上的涉及对象超过-3-个，使用时序图来表达并且明确各调用环节的输入与输出。\"><a href=\"#2-【强制】如果系统中某个功能的调用链路上的涉及对象超过-3-个，使用时序图来表达并且明确各调用环节的输入与输出。\" class=\"headerlink\" title=\"2.【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。\"></a>2.【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。</h2><p>说明：时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。</p>\n<h2 id=\"3-【推荐】类在设计与实现时要符合单一原则。\"><a href=\"#3-【推荐】类在设计与实现时要符合单一原则。\" class=\"headerlink\" title=\"3.【推荐】类在设计与实现时要符合单一原则。\"></a>3.【推荐】类在设计与实现时要符合单一原则。</h2><p>说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</p>\n<h2 id=\"4-【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合-组合的方式来实现。\"><a href=\"#4-【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合-组合的方式来实现。\" class=\"headerlink\" title=\"4.【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。\"></a>4.【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。</h2><p>说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。</p>\n<h2 id=\"5-【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\"><a href=\"#5-【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\" class=\"headerlink\" title=\"5.【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\"></a>5.【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。</h2><p>说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。</p>\n<h2 id=\"6-【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\"><a href=\"#6-【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\" class=\"headerlink\" title=\"6.【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\"></a>6.【推荐】系统设计阶段，注意对扩展开放，对修改闭合。</h2><p>说明：极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。</p>\n<h2 id=\"7-【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即-DRY-原则（Don’t-Repeat-Yourself）。\"><a href=\"#7-【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即-DRY-原则（Don’t-Repeat-Yourself）。\" class=\"headerlink\" title=\"7. 【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 DRY 原则（Don’t Repeat Yourself）。\"></a>7. 【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 DRY 原则（Don’t Repeat Yourself）。</h2><p>说明：随着代码的重复次数不断增加，维护成本指数级上升。随意复制和粘贴代码，必然会导致代码的重复，在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</p>\n<p>正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：</p>\n<p>private boolean checkParam(DTO dto) {…} </p>\n<h2 id=\"8-【推荐】避免如下误解：敏捷开发-讲故事-编码-发布。\"><a href=\"#8-【推荐】避免如下误解：敏捷开发-讲故事-编码-发布。\" class=\"headerlink\" title=\"8.【推荐】避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布。\"></a>8.【推荐】避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布。</h2><p>说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。</p>\n<p>反例：某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。</p>\n<h2 id=\"9-【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\"><a href=\"#9-【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\" class=\"headerlink\" title=\"9.【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\"></a>9.【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。</h2><p>说明：避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归档保存。</p>\n<h2 id=\"10-【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\"><a href=\"#10-【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\" class=\"headerlink\" title=\"10.【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\"></a>10.【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。</h2><p>说明：世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</p>\n<p>正例：极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</p>\n<h2 id=\"11-【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\"><a href=\"#11-【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\" class=\"headerlink\" title=\"11.【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\"></a>11.【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。</h2><p>说明：代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题是需要相应的文档来完整地呈现的。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>根据学习根据极客时间 《设计模式之美》专栏 （王争 前Google工程师）和《阿里 java 规范》整理总结。</p>\n<p>分别介绍编码规范的三个部分：命名与注释（Naming and Comments）、代码风格（Code Style）和编程技巧（Coding Tips）。</p>\n</blockquote>\n<h2 id=\"关于命名\"><a href=\"#关于命名\" class=\"headerlink\" title=\"关于命名\"></a>关于命名</h2><ul>\n<li>命名的关键是能准确达意。对于不同作用域的命名，我们可以适当地选择不同的长度。作用域小的变量（比如临时变量），可以适当地选择短一些的命名方式。除此之外，命名中也可以使用一些耳熟能详的缩写。</li>\n<li>我们可以借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。</li>\n<li>命名要可读、可搜索。不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范，不要用些反直觉的命名。</li>\n<li>接口有两种命名方式：一种是在接口中带前缀“I”；另一种是在接口的实现类中带后缀“Impl”。对于抽象类的命名，也有两种方式，一种是带上前缀“Abstract”，一种是不带前缀。这两种命名方式都可以，关键是要在项目中统一。</li>\n</ul>\n<h2 id=\"关于注释\"><a href=\"#关于注释\" class=\"headerlink\" title=\"关于注释\"></a>关于注释</h2><ul>\n<li>注释的目的就是让代码更容易看懂。只要符合这个要求的内容，你就可以将它写到注释里。总结一下，注释的内容主要包含这样三个方面：做什么、为什么、怎么做。对于一些复杂的类和接口，我们可能还需要写明“如何用”。</li>\n<li>注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写得尽可能全面、详细，而函数内部的注释要相对少一些，一般都是靠好的命名、提炼函数、解释性变量、总结性注释来提高代码可读性。</li>\n</ul>\n<h2 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h2><p>开发前，我一般先写注释，再写代码。比如写一个方法，我会先拆分业务逻辑，把注释给写上。后面再看注释，写代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todo </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createOrder</span><span class=\"params\">(RequestVo request)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo 校验用户登录</span></span><br><span class=\"line\">  <span class=\"comment\">// todo 校验商品</span></span><br><span class=\"line\">  <span class=\"comment\">// todo 创建订单</span></span><br><span class=\"line\">  <span class=\"comment\">// todo 拼装、返回结果集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于注释：之前我的看法只要逻辑清晰命名准确达意就不用写注释了，现在回过来想这个问题，代码是需要不断维护的，即使当时你思路清晰那么过了一段时间后还能那么清晰么。人的大脑只会记住关键的信息，那么注释就是帮助我们梳理自己的想法和逻辑沉淀下来，是百利无害的事情，当别人接手也能迅速理解，降低沟通成本。如何注释才是好的注释呢？文中提到三点：做什么、为什么做、怎么做、怎么用（API）。这里最重要的事做什么，。我再补充一点，可以加下使用场景或者业务场景。</p>\n<p>关于命名：这点我基本无疑义，总结下来就是两点：简洁达意和风格统一。</p>\n<h1 id=\"理论五：让你最快速地改善代码质量的20条编程规范（中）\"><a href=\"#理论五：让你最快速地改善代码质量的20条编程规范（中）\" class=\"headerlink\" title=\"理论五：让你最快速地改善代码质量的20条编程规范（中）\"></a>理论五：让你最快速地改善代码质量的20条编程规范（中）</h1><h2 id=\"1-函数、类多大才合适？\"><a href=\"#1-函数、类多大才合适？\" class=\"headerlink\" title=\"1 函数、类多大才合适？\"></a>1 函数、类多大才合适？</h2><p>函数的代码行数不要超过一屏幕的大小，比如 50 行。类的大小限制比较难确定。</p>\n<h2 id=\"2-一行代码多长最合适？\"><a href=\"#2-一行代码多长最合适？\" class=\"headerlink\" title=\"2.一行代码多长最合适？\"></a>2.一行代码多长最合适？</h2><p>最好不要超过 IDE 显示的宽度。当然，限制也不能太小，太小会导致很多稍微长点的语句被折成两行，也会影响到代码的整洁，不利于阅读。</p>\n<h2 id=\"3-善用空行分割单元块\"><a href=\"#3-善用空行分割单元块\" class=\"headerlink\" title=\"3. 善用空行分割单元块\"></a>3. 善用空行分割单元块</h2><p>对于比较长的函数，为了让逻辑更加清晰，可以使用空行来分割各个代码块。在类内部，成员变量与函数之间、静态成员变量与普通成员变量之间、函数之间，甚至成员变量之间，都可以通过添加空行的方式，让不同模块的代码之间的界限更加明确。</p>\n<h2 id=\"4-四格缩进还是两格缩进？\"><a href=\"#4-四格缩进还是两格缩进？\" class=\"headerlink\" title=\"4. 四格缩进还是两格缩进？\"></a>4. 四格缩进还是两格缩进？</h2><p>我个人比较推荐使用两格缩进，这样可以节省空间，特别是在代码嵌套层次比较深的情况下。除此之外，值得强调的是，不管是用两格缩进还是四格缩进，一定不要用 tab 键缩进。</p>\n<h2 id=\"5-大括号是否要另起一行？\"><a href=\"#5-大括号是否要另起一行？\" class=\"headerlink\" title=\"5. 大括号是否要另起一行？\"></a>5. 大括号是否要另起一行？</h2><p>我个人还是比较推荐将大括号放到跟上一条语句同一行的风格，这样可以节省代码行数。但是，将大括号另起一行，也有它的优势，那就是，左右括号可以垂直对齐，哪些代码属于哪一个代码块，更加一目了然。</p>\n<h2 id=\"6-类中成员的排列顺序\"><a href=\"#6-类中成员的排列顺序\" class=\"headerlink\" title=\"6. 类中成员的排列顺序\"></a>6. 类中成员的排列顺序</h2><p>在 Google Java 编程规范中，依赖类按照字母序从小到大排列。类中先写成员变量后写函数。成员变量之间或函数之间，先写静态成员变量或函数，后写普通变量或函数，并且按照作用域大小依次排列。</p>\n<h1 id=\"关于编码技巧\"><a href=\"#关于编码技巧\" class=\"headerlink\" title=\"关于编码技巧\"></a>关于编码技巧</h1><h2 id=\"1-将复杂的逻辑提炼拆分成函数和类。\"><a href=\"#1-将复杂的逻辑提炼拆分成函数和类。\" class=\"headerlink\" title=\"1. 将复杂的逻辑提炼拆分成函数和类。\"></a>1. 将复杂的逻辑提炼拆分成函数和类。</h2><h2 id=\"2-通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\"><a href=\"#2-通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\" class=\"headerlink\" title=\"2. 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。\"></a>2. 通过拆分成多个函数或将参数封装为对象的方式，来处理参数过多的情况。</h2><p>​        我个人觉得，函数包含 3、4 个参数的时候还是能接受的，大于等于 5 个的时候，我们就觉得参数有点过多了，会影响到代码的可读性，使用起来也不方便。针对参数过多的情况，一般有 2 种处理方法。</p>\n<ul>\n<li><p>考虑函数是否职责单一，是否能通过拆分成多个函数的方式来减少参数。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">(String username, String telephone, String email)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成多个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserByUsername</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserByTelephone</span><span class=\"params\">(String telephone)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserByEmail</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>将函数的参数封装成对象。示例代码如下所示：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postBlog</span><span class=\"params\">(String title, String summary, String keywords, String content, String category, <span class=\"keyword\">long</span> authorId)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将参数封装成对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Blog</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String summary;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String keywords;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Strint content;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String category;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> authorId;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postBlog</span><span class=\"params\">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"3-函数中不要使用参数来做代码执行逻辑的控制。\"><a href=\"#3-函数中不要使用参数来做代码执行逻辑的控制。\" class=\"headerlink\" title=\"3. 函数中不要使用参数来做代码执行逻辑的控制。\"></a>3. 函数中不要使用参数来做代码执行逻辑的控制。</h2><p>不要在函数中使用布尔类型的标识参数来控制内部逻辑，true 的时候走这块逻辑，false 的时候走另一块逻辑。这明显违背了单一职责原则和接口隔离原则。我建议将其拆成两个函数，可读性上也要更好。我举个例子来说明一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将其拆分成两个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyCourse</span><span class=\"params\">(<span class=\"keyword\">long</span> userId, <span class=\"keyword\">long</span> courseId)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyCourseForVip</span><span class=\"params\">(<span class=\"keyword\">long</span> userId, <span class=\"keyword\">long</span> courseId)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>不过，如果函数是 private 私有函数，影响范围有限，或者拆分之后的两个函数经常同时被调用，我们可以酌情考虑保留标识参数。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成两个函数的调用方式</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isVip = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//...省略其他逻辑...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isVip) &#123;</span><br><span class=\"line\">  buyCourseForVip(userId, courseId);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  buyCourse(userId, courseId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保留标识参数的调用方式更加简洁</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isVip = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//...省略其他逻辑...</span></span><br><span class=\"line\">buyCourse(userId, courseId, isVip);</span><br></pre></td></tr></table></figure>\n\n<p>除了布尔类型作为标识参数来控制逻辑的情况外，还有一种“根据参数是否为 null”来控制逻辑的情况。针对这种情况，我们也应该将其拆分成多个函数。拆分之后的函数职责更明确，不容易用错。具体代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactions</span><span class=\"params\">(Long userId, Date startDate, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate != <span class=\"keyword\">null</span> &amp;&amp; endDate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询两个时间区间的transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate != <span class=\"keyword\">null</span> &amp;&amp; endDate == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询startDate之后的所有transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate == <span class=\"keyword\">null</span> &amp;&amp; endDate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询endDate之前的所有transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startDate == <span class=\"keyword\">null</span> &amp;&amp; endDate == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询所有的transactions</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成多个public函数，更加清晰、易用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactionsBetween</span><span class=\"params\">(Long userId, Date startDate, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, startDate, endDate);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactionsStartWith</span><span class=\"params\">(Long userId, Date startDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, startDate, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactionsEndWith</span><span class=\"params\">(Long userId, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, <span class=\"keyword\">null</span>, endDate);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Transaction&gt; <span class=\"title\">selectAllTransactions</span><span class=\"params\">(Long userId)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> selectTransactions(userId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> List&lt;Transaction&gt; <span class=\"title\">selectTransactions</span><span class=\"params\">(Long userId, Date startDate, Date endDate)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-函数设计要职责单一。\"><a href=\"#4-函数设计要职责单一。\" class=\"headerlink\" title=\"4. 函数设计要职责单一。\"></a>4. 函数设计要职责单一。</h2><p>我们在前面讲到单一职责原则的时候，针对的是类、模块这样的应用对象。实际上，对于函数的设计来说，更要满足单一职责原则。相对于类和模块，函数的粒度比较小，代码行数少，所以在应用单一职责原则的时候，没有像应用到类或者模块那样模棱两可，能多单一就多单一。</p>\n<p>具体的代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExisting</span><span class=\"params\">(String telephone, String username, String email)</span>  </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!StringUtils.isBlank(telephone)) &#123;</span><br><span class=\"line\">    User user = userRepo.selectUserByTelephone(telephone);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!StringUtils.isBlank(username)) &#123;</span><br><span class=\"line\">    User user = userRepo.selectUserByUsername(username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!StringUtils.isBlank(email)) &#123;</span><br><span class=\"line\">    User user = userRepo.selectUserByEmail(email);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分成三个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExistingByTelephone</span><span class=\"params\">(String telephone)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExistingByUsername</span><span class=\"params\">(String username)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkUserIfExistingByEmail</span><span class=\"params\">(String email)</span></span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-移除过深的嵌套层次，方法包括：去掉多余的-if-或-else-语句，使用-continue、break、return-关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\"><a href=\"#5-移除过深的嵌套层次，方法包括：去掉多余的-if-或-else-语句，使用-continue、break、return-关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\" class=\"headerlink\" title=\"5. 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。\"></a>5. 移除过深的嵌套层次，方法包括：去掉多余的 if 或 else 语句，使用 continue、break、return 关键字提前退出嵌套，调整执行顺序来减少嵌套，将部分嵌套逻辑抽象成函数。</h2><p>代码嵌套层次过深往往是因为 if-else、switch-case、for 循环过度嵌套导致的。我个人建议，嵌套最好不超过两层，超过两层之后就要思考一下是否可以减少嵌套。过深的嵌套本身理解起来就比较费劲，除此之外，嵌套过深很容易因为代码多次缩进，导致嵌套内部的语句超过一行的长度而折成两行，影响代码的整洁。解决嵌套过深的方法也比较成熟，有下面 4 种常见的思路。</p>\n<ul>\n<li><p>去掉多余的 if 或 else 语句。代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">caculateTotalAmount</span><span class=\"params\">(List&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (orders == <span class=\"keyword\">null</span> || orders.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 此处的else可以去掉</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> amount = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Order order : orders) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (order != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        amount += (order.getCount() * order.getPrice());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">matchStrings</span><span class=\"params\">(List&lt;String&gt; strList,String substr)</span> </span>&#123;</span><br><span class=\"line\">  List&lt;String&gt; matchedStrings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (strList != <span class=\"keyword\">null</span> &amp;&amp; substr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String str : strList) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 跟下面的if语句可以合并在一起</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.contains(substr)) &#123;</span><br><span class=\"line\">          matchedStrings.add(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matchedStrings;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>调整执行顺序来减少嵌套。具体的代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构前的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">matchStrings</span><span class=\"params\">(List&lt;String&gt; strList,String substr)</span> </span>&#123;</span><br><span class=\"line\">  List&lt;String&gt; matchedStrings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (strList != <span class=\"keyword\">null</span> &amp;&amp; substr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String str : strList) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str.contains(substr)) &#123;</span><br><span class=\"line\">          matchedStrings.add(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matchedStrings;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构后的代码：先执行判空逻辑，再执行正常逻辑</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">matchStrings</span><span class=\"params\">(List&lt;String&gt; strList,String substr)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (strList == <span class=\"keyword\">null</span> || substr == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//先判空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;String&gt; matchedStrings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (String str : strList) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str.contains(substr)) &#123;</span><br><span class=\"line\">        matchedStrings.add(str);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> matchedStrings;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>将部分嵌套逻辑封装成函数调用，以此来减少嵌套。具体的代码示例如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构前的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">appendSalts</span><span class=\"params\">(List&lt;String&gt; passwords)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (passwords == <span class=\"keyword\">null</span> || passwords.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  List&lt;String&gt; passwordsWithSalt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (String password : passwords) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password.length() &lt; <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> passwordsWithSalt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重构后的代码：将部分逻辑抽成函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">appendSalts</span><span class=\"params\">(List&lt;String&gt; passwords)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (passwords == <span class=\"keyword\">null</span> || passwords.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;String&gt; passwordsWithSalt = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (String password : passwords) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (password == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    passwordsWithSalt.add(appendSalt(password));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> passwordsWithSalt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">appendSalt</span><span class=\"params\">(String password)</span> </span>&#123;</span><br><span class=\"line\">  String passwordWithSalt = password;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (password.length() &lt; <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> passwordWithSalt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，常用的还有通过使用多态来替代 if-else、switch-case 条件判断的方法。这个思路涉及代码结构的改动。</p>\n</li>\n</ul>\n<h2 id=\"6-用字面常量取代魔法数。\"><a href=\"#6-用字面常量取代魔法数。\" class=\"headerlink\" title=\"6. 用字面常量取代魔法数。\"></a>6. 用字面常量取代魔法数。</h2><p>常用的用解释性变量来提高代码的可读性的情况有下面 2 种.</p>\n<ul>\n<li><p>常量取代魔法数字。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">CalculateCircularArea</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"number\">3.1415</span>) * radius * radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常量替代魔法数字</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Double PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">CalculateCircularArea</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PI * radius * radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用解释性变量来解释复杂表达式。示例代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (date.after(SUMMER_START) &amp;&amp; date.before(SUMMER_END)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入解释性变量后逻辑更加清晰</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isSummer = date.after(SUMMER_START)&amp;&amp;date.before(SUMMER_END);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSummer) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"7-用解释性变量来解释复杂表达式，以此提高代码可读性。\"><a href=\"#7-用解释性变量来解释复杂表达式，以此提高代码可读性。\" class=\"headerlink\" title=\"7. 用解释性变量来解释复杂表达式，以此提高代码可读性。\"></a>7. 用解释性变量来解释复杂表达式，以此提高代码可读性。</h2><p><a href=\"https://time.geekbang.org/column/article/188882\">https://time.geekbang.org/column/article/188882</a></p>\n<h1 id=\"其他《阿里-JAVA-规范》\"><a href=\"#其他《阿里-JAVA-规范》\" class=\"headerlink\" title=\"其他《阿里 JAVA 规范》\"></a>其他《阿里 JAVA 规范》</h1><h1 id=\"OOP-规约：\"><a href=\"#OOP-规约：\" class=\"headerlink\" title=\"OOP 规约：\"></a>OOP 规约：</h1><h2 id=\"1-【强制】POJO-类中的任何布尔类型的变量，都不要加-is-前缀，否则部分框架解析会引起序列化错误。\"><a href=\"#1-【强制】POJO-类中的任何布尔类型的变量，都不要加-is-前缀，否则部分框架解析会引起序列化错误。\" class=\"headerlink\" title=\"1. 【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。\"></a>1. 【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</h2><blockquote>\n<p>说明：在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要</p>\n<p>在<resultMap>设置从 is_xxx 到 xxx 的映射关系。</p>\n<p>反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时</p>\n<p>候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p>\n</blockquote>\n<h2 id=\"2-【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\"><a href=\"#2-【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\" class=\"headerlink\" title=\"2. 【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。\"></a>2. 【推荐】在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。</h2><p>正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT</p>\n<p>反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD</p>\n<h2 id=\"3-【强制】注释的双斜线与注释内容之间有且仅有一个空格。\"><a href=\"#3-【强制】注释的双斜线与注释内容之间有且仅有一个空格。\" class=\"headerlink\" title=\"3. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。\"></a>3. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"><span class=\"comment\">// 这是示例注释，请注意在双斜线之后有一个空格</span></span><br><span class=\"line\">String commentString = <span class=\"keyword\">new</span> String();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-【强制】-POJO-类必须写-toString-方法。\"><a href=\"#4-【强制】-POJO-类必须写-toString-方法。\" class=\"headerlink\" title=\"4.【强制】 POJO 类必须写 toString 方法。\"></a>4.【强制】 POJO 类必须写 toString 方法。</h2><p>使用 IDE 中的工具：source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>\n<p>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>\n<h2 id=\"5-【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在-init-方法中。\"><a href=\"#5-【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在-init-方法中。\" class=\"headerlink\" title=\"5. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\"></a>5. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</h2><h2 id=\"6-【强制】定义-DO-DTO-VO-等-POJO-类时，不要设定任何属性默认值。\"><a href=\"#6-【强制】定义-DO-DTO-VO-等-POJO-类时，不要设定任何属性默认值。\" class=\"headerlink\" title=\"6. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。\"></a>6. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。</h2><p>反例：POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p>\n<h2 id=\"7-【推荐】final-可以声明类、成员变量、方法、以及本地变量，下列情况使用-final-关键字：\"><a href=\"#7-【推荐】final-可以声明类、成员变量、方法、以及本地变量，下列情况使用-final-关键字：\" class=\"headerlink\" title=\"7. 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：\"></a>7. 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</h2><p>1） 不允许被继承的类，如：String 类。</p>\n<p>2） 不允许修改引用的域对象，如：POJO 类的域变量。 </p>\n<p>3） 不允许被覆写的方法，如：POJO 类的 setter 方法。</p>\n<p>4） 不允许运行过程中重新赋值的局部变量。 </p>\n<p>5） 避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。</p>\n<h2 id=\"8-【推荐】类成员与方法访问控制从严：\"><a href=\"#8-【推荐】类成员与方法访问控制从严：\" class=\"headerlink\" title=\"8. 【推荐】类成员与方法访问控制从严：\"></a>8. 【推荐】类成员与方法访问控制从严：</h2><p>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。 </p>\n<p>2） 工具类不允许有 public 或 default 构造方法。</p>\n<p>3） 类非 static 成员变量并且与子类共享，必须是 protected。 </p>\n<p>4） 类非 static 成员变量并且仅在本类使用，必须是 private。</p>\n<p>5） 类 static 成员变量如果仅在本类使用，必须是 private。 </p>\n<p>6） 若是 static 成员变量，考虑是否为 final。 </p>\n<p>7） 类成员方法只供类内部调用，必须是 private。 </p>\n<p>8） 类成员方法只对继承类公开，那么限制为 protected。</p>\n<p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。</p>\n<p>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p>\n<h1 id=\"日期时间：\"><a href=\"#日期时间：\" class=\"headerlink\" title=\"日期时间：\"></a>日期时间：</h1><h2 id=\"1-【强制】日期格式化时，传入-pattern-中表示年份统一使用小写的-y。\"><a href=\"#1-【强制】日期格式化时，传入-pattern-中表示年份统一使用小写的-y。\" class=\"headerlink\" title=\"1. 【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。\"></a>1. 【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</h2><p>说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。</p>\n<p>正例：表示日期和时间的格式如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-【强制】在日期格式中分清楚大写的-M-和小写的-m，大写的-H-和小写的-h-分别指代的意义。\"><a href=\"#2-【强制】在日期格式中分清楚大写的-M-和小写的-m，大写的-H-和小写的-h-分别指代的意义。\" class=\"headerlink\" title=\"2. 【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。\"></a>2. 【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</h2><p>说明：日期格式中的这两对字母表意如下：</p>\n<p>1） 表示月份是大写的 M； </p>\n<p>2） 表示分钟则是小写的 m； </p>\n<p>3） 24 小时制的是大写的 H； </p>\n<p>4） 12 小时制的则是小写的 h。</p>\n<h2 id=\"3-【推荐】使用枚举值来指代月份。如果使用数字，注意-Date，Calendar-等日期相关类的月份-month-取值在-0-11-之间。\"><a href=\"#3-【推荐】使用枚举值来指代月份。如果使用数字，注意-Date，Calendar-等日期相关类的月份-month-取值在-0-11-之间。\" class=\"headerlink\" title=\"3. 【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值在 0-11 之间。\"></a>3. 【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取值在 0-11 之间。</h2><p>说明：参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.</p>\n<p>正例： Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。</p>\n<h1 id=\"集合处理：\"><a href=\"#集合处理：\" class=\"headerlink\" title=\"集合处理：\"></a>集合处理：</h1><h2 id=\"1-【强制】关于-hashCode-和-equals-的处理，遵循如下规则：\"><a href=\"#1-【强制】关于-hashCode-和-equals-的处理，遵循如下规则：\" class=\"headerlink\" title=\"1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：\"></a>1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</h2><p>1） 只要覆写 equals，就必须覆写 hashCode。 </p>\n<p>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。</p>\n<p>3） <strong>如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</strong></p>\n<p>说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。</p>\n<h2 id=\"2-【强制】判断所有集合内部的元素是否为空，使用-isEmpty-方法，而不是-size-0-的方式。\"><a href=\"#2-【强制】判断所有集合内部的元素是否为空，使用-isEmpty-方法，而不是-size-0-的方式。\" class=\"headerlink\" title=\"2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。\"></a>2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。</h2><p>说明：在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。</p>\n<p>正例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(map.isEmpty()) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;no element in this map.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-【强制】在使用-Collection-接口任何实现类的-addAll-方法时，都要对输入的集合参数进行NPE-判断。\"><a href=\"#3-【强制】在使用-Collection-接口任何实现类的-addAll-方法时，都要对输入的集合参数进行NPE-判断。\" class=\"headerlink\" title=\"3.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。\"></a>3.【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断。</h2><p>说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果为 null，则直接抛出异常。</p>\n<h2 id=\"4-【强制】不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。\"><a href=\"#4-【强制】不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁。\" class=\"headerlink\" title=\"4.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。\"></a>4.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">String item = iterator.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (删除元素的条件) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">iterator.remove();</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">反例：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String item : list) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;1&quot;</span>.equals(item)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">list.remove(item);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p>\n<h2 id=\"5-【强制】在-JDK7-版本及以上，Comparator-实现类要满足如下三个条件，不然-Arrays-sort，Collections-sort-会抛-IllegalArgumentException-异常。\"><a href=\"#5-【强制】在-JDK7-版本及以上，Comparator-实现类要满足如下三个条件，不然-Arrays-sort，Collections-sort-会抛-IllegalArgumentException-异常。\" class=\"headerlink\" title=\"5. 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。\"></a>5. 【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。</h2><p>说明：三个条件如下 </p>\n<p>1） x，y 的比较结果和 y，x 的比较结果相反。</p>\n<p>2） x &gt; y，y &gt; z，则 x &gt; z。 </p>\n<p>3） x = y，则 x，z 比较结果和 y，z 比较结果相同。</p>\n<p>反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中</p>\n<p>可能会出现异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Student o1, Student o2)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> o1.getId() &gt; o2.getId() ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-【推荐】使用-entrySet-遍历-Map-类集合-KV，而不是-keySet-方式进行遍历。\"><a href=\"#6-【推荐】使用-entrySet-遍历-Map-类集合-KV，而不是-keySet-方式进行遍历。\" class=\"headerlink\" title=\"6. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。\"></a>6. 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</h2><p>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的</p>\n<p>value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用</p>\n<p>Map.forEach 方法。</p>\n<p>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对</p>\n<p>象；entrySet()返回的是 K-V 值组合集合。</p>\n<ol start=\"7\">\n<li><h2 id=\"【推荐】高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格：\"><a href=\"#【推荐】高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格：\" class=\"headerlink\" title=\"【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：\"></a>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</h2></li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gpzb9eujt3j30me07uq41.jpg\" alt=\"image-20210428114518033\"></p>\n<p>反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</p>\n<h1 id=\"前后端规约：\"><a href=\"#前后端规约：\" class=\"headerlink\" title=\"前后端规约：\"></a>前后端规约：</h1><h2 id=\"1-【强制】前后端交互的-API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\"><a href=\"#1-【强制】前后端交互的-API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\" class=\"headerlink\" title=\"1. 【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。\"></a>1. 【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。</h2><p>说明：</p>\n<p>1） 协议：生产环境必须使用 HTTPS。 </p>\n<p>2） 路径：每一个 API 需对应一个路径，表示 API 具体的请求地址：</p>\n<p>​        a） 代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。</p>\n<p>​        b） URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。</p>\n<p>​        c） 路径禁止携带表示请求内容类型的后缀，比如”.json”,”.xml”，通过 accept 头表达即可。</p>\n<p>3） 请求方法：对具体操作的定义，常见的请求方法如下：</p>\n<p>​        a） GET：从服务器取出资源。</p>\n<p>​        b） POST：在服务器新建一个资源。</p>\n<p>​        c） PUT：在服务器更新资源。</p>\n<p>​        d） DELETE：从服务器删除资源。</p>\n<p>4） 请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。 </p>\n<p>5） 响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。</p>\n<h2 id=\"2-【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组-或空集合-。\"><a href=\"#2-【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组-或空集合-。\" class=\"headerlink\" title=\"2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。\"></a>2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。</h2><p>说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</p>\n<h2 id=\"3-【强制】服务端发生错误时，返回给前端的响应信息必须包含-HTTP-状态码，errorCode、errorMessage、用户提示信息四个部分。\"><a href=\"#3-【强制】服务端发生错误时，返回给前端的响应信息必须包含-HTTP-状态码，errorCode、errorMessage、用户提示信息四个部分。\" class=\"headerlink\" title=\"3. 【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。\"></a>3. 【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。</h2><p>说明：四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。 errorCode：参考<strong>附表 3</strong>。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏感数据信息。</p>\n<p>正例：常见的 HTTP 状态码如下</p>\n<p>1） 200 OK: 表明该请求被成功地完成，所请求的资源发送到客户端。</p>\n<p>2） 401 Unauthorized: 请求要求身份验证，常见对于需要登录而用户未登录的情况。</p>\n<p>3） 403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。</p>\n<p>4） 404 Not Found: 服务器无法取得所请求的网页，请求资源不存在。</p>\n<p>5） 500 Internal Server Error: 服务器内部错误。</p>\n<h2 id=\"4-【强制】对于需要使用超大整数的场景，服务端一律使用-String-字符串类型返回，禁止使用Long-类型。\"><a href=\"#4-【强制】对于需要使用超大整数的场景，服务端一律使用-String-字符串类型返回，禁止使用Long-类型。\" class=\"headerlink\" title=\"4. 【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用Long 类型。\"></a>4. 【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用Long 类型。</h2><p><strong>说明</strong>：Java 服务端如果直接返回 Long 整型数据给前端，JS 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 2 的 63 次方-1，在取值范围之内，超过 2 的 53 次 (9007199254740992)的数值转化为 JS 的 Number 时，有些数值会有精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。</p>\n<p><strong>反例</strong>：通常在订单号或交易号大于等于 16 位，大概率会出现前后端单据不一致的情况，比如，”orderId”: 362909601374617692，前端拿到的值却是: 362909601374617660。</p>\n<h1 id=\"异常处理：\"><a href=\"#异常处理：\" class=\"headerlink\" title=\"异常处理：\"></a>异常处理：</h1><h2 id=\"1-【推荐】方法的返回值可以为-null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回-null-值。\"><a href=\"#1-【推荐】方法的返回值可以为-null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回-null-值。\" class=\"headerlink\" title=\"1.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。\"></a>1.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。</h2><p>说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。</p>\n<h2 id=\"2-【推荐】防止-NPE，是程序员的基本修养，注意-NPE-产生的场景：\"><a href=\"#2-【推荐】防止-NPE，是程序员的基本修养，注意-NPE-产生的场景：\" class=\"headerlink\" title=\"2. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：\"></a>2. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</h2><p>1） 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。</p>\n<p>反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。 </p>\n<p>2） 数据库的查询结果可能为 null。 </p>\n<p>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。 </p>\n<p>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。 </p>\n<p>5） 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p>\n<p>6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p>\n<p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题。</p>\n<h2 id=\"3-【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\"><a href=\"#3-【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\" class=\"headerlink\" title=\"3. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\"></a>3. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</h2><h2 id=\"4-【参考】对于公司外的-http-api-开放接口必须使用-errorCode；而应用内部推荐异常抛出；跨应用间-RPC-调用优先考虑使用-Result-方式，封装-isSuccess-方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\"><a href=\"#4-【参考】对于公司外的-http-api-开放接口必须使用-errorCode；而应用内部推荐异常抛出；跨应用间-RPC-调用优先考虑使用-Result-方式，封装-isSuccess-方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\" class=\"headerlink\" title=\"4. 【参考】对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接抛出异常即可。\"></a>4. 【参考】对于公司外的 http/api 开放接口必须使用 errorCode；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、errorCode、errorMessage；而应用内部直接抛出异常即可。</h2><p>说明：关于 RPC 方法返回方式使用 Result 方式的理由：</p>\n<p>1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。</p>\n<p>2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p>\n<h1 id=\"日志规约：\"><a href=\"#日志规约：\" class=\"headerlink\" title=\"日志规约：\"></a>日志规约：</h1><h2 id=\"1-【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\"><a href=\"#1-【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\" class=\"headerlink\" title=\"1.【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。\"></a>1.【强制】在日志输出时，字符串变量之间的拼接使用占位符的方式。</h2><p>说明：因为 String 字符串的拼接会使用 StringBuilder 的 append()方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能。</p>\n<p>正例：logger.debug(“Processing trade with id: {} and symbol: {}”, id, symbol);</p>\n<h2 id=\"2-【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\"><a href=\"#2-【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\" class=\"headerlink\" title=\"2.【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。\"></a>2.【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。</h2><p>说明：国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息。</p>\n<h1 id=\"设计规约：\"><a href=\"#设计规约：\" class=\"headerlink\" title=\"设计规约：\"></a>设计规约：</h1><h2 id=\"1-【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\"><a href=\"#1-【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\" class=\"headerlink\" title=\"1.【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。\"></a>1.【强制】存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档。</h2><p>说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 double check。</p>\n<p>正例：评审内容包括存储介质选型、表结构设计能否满足技术方案、存取性能和存储空间能否满足业务发展、表或字段之间的辩证关系、字段名称、字段类型、索引等；数据结构变更（如在原有表中新增字段）也需要进行评审通过后上线。</p>\n<h2 id=\"2-【强制】如果系统中某个功能的调用链路上的涉及对象超过-3-个，使用时序图来表达并且明确各调用环节的输入与输出。\"><a href=\"#2-【强制】如果系统中某个功能的调用链路上的涉及对象超过-3-个，使用时序图来表达并且明确各调用环节的输入与输出。\" class=\"headerlink\" title=\"2.【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。\"></a>2.【强制】如果系统中某个功能的调用链路上的涉及对象超过 3 个，使用时序图来表达并且明确各调用环节的输入与输出。</h2><p>说明：时序图反映了一系列对象间的交互与协作关系，清晰立体地反映系统的调用纵深链路。</p>\n<h2 id=\"3-【推荐】类在设计与实现时要符合单一原则。\"><a href=\"#3-【推荐】类在设计与实现时要符合单一原则。\" class=\"headerlink\" title=\"3.【推荐】类在设计与实现时要符合单一原则。\"></a>3.【推荐】类在设计与实现时要符合单一原则。</h2><p>说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。</p>\n<h2 id=\"4-【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合-组合的方式来实现。\"><a href=\"#4-【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合-组合的方式来实现。\" class=\"headerlink\" title=\"4.【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。\"></a>4.【推荐】谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。</h2><p>说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。</p>\n<h2 id=\"5-【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\"><a href=\"#5-【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\" class=\"headerlink\" title=\"5.【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。\"></a>5.【推荐】系统设计阶段，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。</h2><p>说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。</p>\n<h2 id=\"6-【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\"><a href=\"#6-【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\" class=\"headerlink\" title=\"6.【推荐】系统设计阶段，注意对扩展开放，对修改闭合。\"></a>6.【推荐】系统设计阶段，注意对扩展开放，对修改闭合。</h2><p>说明：极端情况下，交付的代码是不可修改的，同一业务域内的需求变化，通过模块或类的扩展来实现。</p>\n<h2 id=\"7-【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即-DRY-原则（Don’t-Repeat-Yourself）。\"><a href=\"#7-【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即-DRY-原则（Don’t-Repeat-Yourself）。\" class=\"headerlink\" title=\"7. 【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 DRY 原则（Don’t Repeat Yourself）。\"></a>7. 【推荐】系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，在系统中不出现重复代码的情况，即 DRY 原则（Don’t Repeat Yourself）。</h2><p>说明：随着代码的重复次数不断增加，维护成本指数级上升。随意复制和粘贴代码，必然会导致代码的重复，在维护代码时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。</p>\n<p>正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：</p>\n<p>private boolean checkParam(DTO dto) {…} </p>\n<h2 id=\"8-【推荐】避免如下误解：敏捷开发-讲故事-编码-发布。\"><a href=\"#8-【推荐】避免如下误解：敏捷开发-讲故事-编码-发布。\" class=\"headerlink\" title=\"8.【推荐】避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布。\"></a>8.【推荐】避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布。</h2><p>说明：敏捷开发是快速交付迭代可用的系统，省略多余的设计方案，摒弃传统的审批流程，但核心关键点上的必要设计和文档沉淀是需要的。</p>\n<p>反例：某团队为了业务快速发展，敏捷成了产品经理催进度的借口，系统中均是勉强能运行但像面条一样的代码，可维护性和可扩展性极差，一年之后，不得不进行大规模重构，得不偿失。</p>\n<h2 id=\"9-【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\"><a href=\"#9-【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\" class=\"headerlink\" title=\"9.【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。\"></a>9.【参考】设计文档的作用是明确需求、理顺逻辑、后期维护，次要目的用于指导编码。</h2><p>说明：避免为了设计而设计，系统设计文档有助于后期的系统维护和重构，所以设计结果需要进行分类归档保存。</p>\n<h2 id=\"10-【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\"><a href=\"#10-【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\" class=\"headerlink\" title=\"10.【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。\"></a>10.【参考】可扩展性的本质是找到系统的变化点，并隔离变化点。</h2><p>说明：世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</p>\n<p>正例：极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</p>\n<h2 id=\"11-【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\"><a href=\"#11-【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\" class=\"headerlink\" title=\"11.【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。\"></a>11.【参考】代码即文档的观点是错误的，清晰的代码只是文档的某个片断，而不是全部。</h2><p>说明：代码的深度调用，模块层面上的依赖关系网，业务场景逻辑，非功能性需求等问题是需要相应的文档来完整地呈现的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckr2xqjpt0000p61o2qkmbmsg","category_id":"ckr2xqjpy0002p61o8wlg4e35","_id":"ckr2xqjq10007p61o02j82pqx"},{"post_id":"ckr2xqjq00004p61of2ee93m2","category_id":"ckr2xqjq10005p61odfy47wat","_id":"ckr2xqjq2000bp61o34s4hx0w"}],"PostTag":[{"post_id":"ckr2xqjpt0000p61o2qkmbmsg","tag_id":"ckr2xqjpz0003p61obdmv1le7","_id":"ckr2xqjq20009p61o3vx6ey5q"},{"post_id":"ckr2xqjpt0000p61o2qkmbmsg","tag_id":"ckr2xqjq10006p61og57mew5i","_id":"ckr2xqjq2000ap61o4zeg77ot"},{"post_id":"ckr2xqjq00004p61of2ee93m2","tag_id":"ckr2xqjq10008p61o7j1fgxrz","_id":"ckr2xqjq2000dp61o779r11to"},{"post_id":"ckr2xqjq00004p61of2ee93m2","tag_id":"ckr2xqjq2000cp61o2uzd7gce","_id":"ckr2xqjq2000ep61o3p0bf82l"}],"Tag":[{"name":"高效方法","_id":"ckr2xqjpz0003p61obdmv1le7"},{"name":"10x 程序员","_id":"ckr2xqjq10006p61og57mew5i"},{"name":"编程规范","_id":"ckr2xqjq10008p61o7j1fgxrz"},{"name":"设计模式之美","_id":"ckr2xqjq2000cp61o2uzd7gce"}]}}