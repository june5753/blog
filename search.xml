<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AIDL 学习笔记总结</title>
    <url>/blog/2021/08/01/AIDL%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h1><h3 id="AIDL可以解决什么问题？"><a href="#AIDL可以解决什么问题？" class="headerlink" title="AIDL可以解决什么问题？"></a>AIDL可以解决什么问题？</h3><ul>
<li>可以实现多个应用程序共享同一个Service的功能，比如：IM服务可以提供给多个APP使用，先在推送基本都是采取这种方案</li>
<li>可以跨进程调用服务里的方法</li>
</ul>
<h1 id="二-、是什么"><a href="#二-、是什么" class="headerlink" title="二 、是什么"></a>二 、是什么</h1><p>首先进程间通信（IPC，Inter-process Communication）的方式有很多，例如Bundle、文件共享、AIDL、Messenger、ContentProvider以及Socket，方法是多种多样，而我们更应该根据自己的情况去选择合适的方式，下面列举出每种方式的适用场景：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>Bundle</td>
<td>简单易用</td>
<td>只能传输Bundle支持的数据类型</td>
<td>四大组件间的进程通信</td>
</tr>
<tr>
<td>文件共享</td>
<td>简单易用</td>
<td>不适合高并发场景，无法及时通信</td>
<td>无高并发访问，交换简单数据，实时性不高</td>
</tr>
<tr>
<td><strong>AIDL</strong></td>
<td><strong>功能强大，支持一对多并发通信，支持及时通信</strong></td>
<td><strong>使用复杂，需要处理线程同步</strong></td>
<td><strong>一对多且有远程调用需求</strong></td>
</tr>
<tr>
<td>Messenger</td>
<td>功能一般，支持一对多串行，支持实时通信</td>
<td>不能很好处理高并发，不支持远程调用，数据只能使用Message传输</td>
<td>低并发的一对多即时通信，无须直接返回结果，无远程调用</td>
</tr>
<tr>
<td>ContentProvider</td>
<td>数据访问方面功能强大，支持一对多并发数据共享</td>
<td>受约束的AIDL，主要提供数据的增删改查</td>
<td>一对多进程间数据共享</td>
</tr>
<tr>
<td>Socket</td>
<td>功能强大，支持一对多并发实时通信</td>
<td>实现复杂，不支持直接的远程调用</td>
<td>网络数据交互</td>
</tr>
</tbody></table>
<p><em>注：来自《Android开发艺术探究》</em></p>
<p>AIDL出现的目的就是为了解决一对多并发及时通信了，虽然socket也支持，但其更多应用于网络数据交互，也适合多个手机，不同终端进行通信。所以在Android中，google为我们提供了AIDL来方便开发者实现该功能。</p>
<h1 id="三、支持的数据类型"><a href="#三、支持的数据类型" class="headerlink" title="三、支持的数据类型"></a>三、支持的数据类型</h1><p>在进程间通信中，对象的引用是无法传递的，因为其内存地址都不在一个区域内，所以数据的传输都需要序列化后才行，基础数据类型自然是没问题，系统提供的ArrayList以及HashMap也实现了序列化，所以对于自定义的对象实现序列化就只能实现serializable或者parcelable接口，其中前者是java提供的，后者是Android提供的且效率更高，所以在之后的数据序列化中都只使用实现parcelable接口的方法即可，总的来说<strong>支持的数据类型包括：</strong></p>
<ul>
<li>基本数据类型：int、long、char、boolean、double等</li>
<li>系统已实现类型：String、CharSequence、ArrayList、HashMap（后两个的每个元素也得被AIDL支持才行）</li>
<li>正确实现parcelable接口的对象</li>
<li>所有AIDL本身</li>
</ul>
<p><strong>定向tag:</strong></p>
<p>Java 中的基本类型和 String ，CharSequence 的定向 tag <strong>默认且只能是 in</strong> 。</p>
<p>对于非基础数据类型的类型，在aidl中作为参数使用时有三个标记，分别时in、out、inout，表示数据的流向：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>表示能读取到传入的对象中的值，而修改后不会修改传入对象的内容</td>
</tr>
<tr>
<td>out</td>
<td>表示读取到传入的对象为空，修改后会把传入对象的内容改为修改的内容</td>
</tr>
<tr>
<td>inout</td>
<td>表示既能读取到对象，又能修改对象，效果就好比统一进程中对象的传递一样</td>
</tr>
</tbody></table>
<p>请注意，<strong>请不要滥用定向 tag</strong> ，而是要根据需要选取合适的——要是不管三七二十一，全都一上来就用 inout ，等工程大了系统的开销就会大很多——因为排列整理参数的开销是很昂贵的。</p>
<p>扩展阅读：<a href="https://blog.csdn.net/luoyanglizi/article/details/51958091">你真的理解AIDL中的in，out，inout么？</a></p>
<p><strong>两种AIDL文件：</strong>在我的理解里，所有的AIDL文件大致可以分为两类。一类是用来定义parcelable对象，以供其他AIDL文件使用AIDL中非默认支持的数据类型的。一类是用来定义方法接口，以供系统使用来完成跨进程通信的。可以看到，两类文件都是在“定义”些什么，而不涉及具体的实现，这就是为什么它叫做“Android接口定义语言”。<br>注：所有的非默认支持数据类型必须通过第一类AIDL文件定义才能被使用。</p>
<h1 id="四、如何使用"><a href="#四、如何使用" class="headerlink" title="四、如何使用"></a>四、如何使用</h1><p>根据介绍，总结为以下三部分：</p>
<ul>
<li>定义AIDL接口</li>
<li>在服务端返回其Binder以及所需实现的接口</li>
<li>在客户端拿到Binder进行调用</li>
</ul>
<p>流程小结：在服务端实现AIDL中定义的方法接口的具体逻辑，然后在客户端调用这些方法接口，从而达到跨进程通信的目的。</p>
<ol>
<li><p>定义AIDL接口</p>
<ul>
<li><h5 id="创建aidl目录"><a href="#创建aidl目录" class="headerlink" title="创建aidl目录"></a>创建aidl目录</h5></li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IBinder messageSender = <span class="keyword">new</span> MessageSender.Stub() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(MessageModel messageModel)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;messageModel: &quot;</span> + messageModel.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerReceiveListener</span><span class="params">(MessageReceiver messageReceiver)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            listenerList.register(messageReceiver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterReceiveListener</span><span class="params">(MessageReceiver messageReceiver)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            listenerList.unregister(messageReceiver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 包名验证方式</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String packageName = <span class="keyword">null</span>;</span><br><span class="line">            String[] packages = getPackageManager().getPackagesForUid(getCallingUid());</span><br><span class="line">            <span class="keyword">if</span> (packages != <span class="keyword">null</span> &amp;&amp; packages.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                packageName = packages[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (packageName == <span class="keyword">null</span> || !packageName.startsWith(<span class="string">&quot;com.example.aidl&quot;</span>)) &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;onTransact&quot;</span>, <span class="string">&quot;拒绝调用：&quot;</span> + packageName);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>实现的service为AIDL定义的接口，并在OnBind方法中进行关联。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//自定义permission方式检查权限</span></span><br><span class="line">      <span class="keyword">if</span> (checkCallingOrSelfPermission(<span class="string">&quot;com.example.aidl.permission.REMOTE_SERVICE_PERMISSION&quot;</span>) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> messageSender;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>扩展阅读：</p>
<p><a href="https://www.jianshu.com/p/b60cde583237">Android自定义权限使用总结</a></p>
<p>注意点：</p>
<ul>
<li>Android不允许两个不同的应用定义一个相同名字的权限（除非这两个应用拥有相同的签名），所以在命名的时候，需要特别注意。</li>
<li>拥有相同自定义权限的软件必须使用同样的签名，否则后一个程序无法安装。</li>
</ul>
<p>所以这里是否需要自定义，需要根据业务场景来确定。</p>
<p>A.服务端：</p>
<ul>
<li>创建一个<strong>aidl文件</strong>；</li>
<li>创建一个<strong>Service</strong>，实现AIDL的接口函数并暴露AIDL接口。</li>
</ul>
<p>B.客户端：</p>
<ul>
<li>通过<strong>bindService</strong>绑定服务端的Service；</li>
<li>绑定成功后，将服务端返回的Binder对象<strong>转化</strong>成AIDL接口所属的类型，进而调用相应的AIDL中的方法。</li>
</ul>
<blockquote>
<p><strong>总结</strong>：服务端里的某个Service给和它绑定的特定客户端进程提供Binder对象，客户端通过AIDL接口的静态方法asInterface() 将Binder对象转化成AIDL接口的代理对象，通过这个代理对象就可以发起远程调用请求。</p>
</blockquote>
<p>思考：如果要实现双向通信，那么就需要将AIDL的接口都实现，即依赖相同的部分。</p>
<h2 id="可能产生ANR的情形"><a href="#可能产生ANR的情形" class="headerlink" title="可能产生ANR的情形"></a>可能产生ANR的情形</h2><p>A.客户端：</p>
<ul>
<li>调用服务端的方法是运行在服务端的Binder线程池中，若<strong>主线程</strong>所调用的方法里执行了较<strong>耗时</strong>的任务，同时会导致客户端线程长时间阻塞，易导致客户端ANR。</li>
<li>在**onServiceConnected()<strong>和</strong>onServiceDisconnected()**里直接调用服务端的耗时方法，易导致客户端ANR。</li>
</ul>
<p>B.服务端：</p>
<ul>
<li>服务端的方法本身就运行在服务端的<strong>Binder线程</strong>中，可在其中执行耗时操作，而<strong>无需再开启子线程</strong>。</li>
<li><strong>回调客户端Listener的方法</strong>是运行在客户端的Binder线程中，若所调用的方法里执行了较<strong>耗时</strong>的任务，易导致服务端ANR。</li>
</ul>
<blockquote>
<p>解决客户端频繁调用服务器方法导致性能极大损耗的办法：实现<strong>观察者模式</strong>。</p>
<p>即当客户端关注的数据发生变化时，再让服务端通知客户端去做相应的业务处理。</p>
</blockquote>
<h2 id="解注册失败的问题"><a href="#解注册失败的问题" class="headerlink" title="解注册失败的问题"></a>解注册失败的问题</h2><ul>
<li>原因: Binder进行对象传输实际是通过序列化和反序列化进行，即Binder会把客户端传递过来的对象<strong>重新转化</strong>并生成一个新的对象，虽然在注册和解注册的过程中使用的是同一个客户端传递的对象，但经过Binder传到服务端后会生成两个不同的对象。另外，多次跨进程传输的同一个客户端对象会在服务端生成<strong>不同</strong>的对象，但它们在底层的Binder对象是<strong>相同</strong>的。</li>
<li>解决办法：当客户端解注册的时候，遍历服务端所有的Listener，找到和解注册Listener具有相同的Binder对象的服务端Listener，删掉即可。</li>
</ul>
<blockquote>
<p>需要用到<strong>RemoteCallBackList</strong>：Android系统专门提供的用于删除跨进程listener的接口。其内部自动实现了线程同步的功能。</p>
</blockquote>
<h1 id="aidl传输数据的大小限制"><a href="#aidl传输数据的大小限制" class="headerlink" title="aidl传输数据的大小限制"></a>aidl传输数据的大小限制</h1><h1 id="一个Service管理多个AIDL接口"><a href="#一个Service管理多个AIDL接口" class="headerlink" title="一个Service管理多个AIDL接口"></a>一个Service管理多个AIDL接口</h1><p><a href="https://blog.csdn.net/lyl0530/article/details/81839503">https://blog.csdn.net/lyl0530/article/details/81839503</a></p>
<p>Binder连接池，以及怎样实现一个Service管理多个ADIL接口</p>
<h1 id="AIDL终极篇之AIDL架构设计"><a href="#AIDL终极篇之AIDL架构设计" class="headerlink" title="AIDL终极篇之AIDL架构设计"></a>AIDL终极篇之AIDL架构设计</h1><p><a href="https://blog.csdn.net/wangqiubo2010/article/details/78625846">https://blog.csdn.net/wangqiubo2010/article/details/78625846</a></p>
<p>其他开源框架</p>
<p><a href="https://github.com/Xiaofei-it/Hermes">https://github.com/Xiaofei-it/Hermes</a></p>
<p>A smart, novel and easy-to-use framework for Android Inter-Process Communication (IPC). （简单易用的安卓进程间通信IPC框架）</p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol>
<li><p>难点：</p>
<p>服务端如何处理分发和并发</p>
</li>
</ol>
<h1 id="android-–-如何使用AIDL远程服务来处理不同客户端的并发请求"><a href="#android-–-如何使用AIDL远程服务来处理不同客户端的并发请求" class="headerlink" title="android – 如何使用AIDL远程服务来处理不同客户端的并发请求"></a>android – 如何使用AIDL远程服务来处理不同客户端的并发请求</h1><p><a href="http://www.voidcn.com/article/p-zhjgplln-btp.html">http://www.voidcn.com/article/p-zhjgplln-btp.html</a></p>
<p>参考源码：</p>
<p><a href="https://github.com/arvinljw/AndroidArt">https://github.com/arvinljw/AndroidArt</a></p>
<p>参考资料：</p>
<p><a href="https://blog.csdn.net/universus/article/details/6211589">Android Binder设计与实现-设计篇</a>(强烈推荐阅读)</p>
<p><a href="https://www.jianshu.com/p/cb8fa31a459f">Android学习感悟之进程间通信——AIDL详解</a></p>
<p><a href="http://weishu.me/2016/01/12/binder-index-for-newer/">Binder学习指南</a></p>
<p><a href="https://wujingchao.github.io/2016/01/04/art-of-android-development-notes-ipc/"><a href="http://www.amazon.cn/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2-%E4%BB%BB%E7%8E%89%E5%88%9A/dp/B014HV1X3K/ref=sr_1_1?ie=UTF8&qid=1451616304&sr=8-1&keywords=Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2">Android开发艺术探索</a>读书笔记: IPC机制</a></p>
<p><a href="https://gank.io/post/5e52801241bd447e3b978092">https://gank.io/post/5e52801241bd447e3b978092</a></p>
]]></content>
      <categories>
        <category>AIDL</category>
      </categories>
      <tags>
        <tag>AIDL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用注意事项总结</title>
    <url>/blog/2021/08/02/Git%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">➜  Txx <span class="attr">git:</span>(mqtt_test) ✗ git push origin <span class="attr">HEAD:</span>refs<span class="regexp">/for/</span>rexx_v2<span class="number">.108</span><span class="number">.0</span>%wip</span><br><span class="line">枚举对象中: <span class="number">52</span>, 完成.</span><br><span class="line">对象计数中: <span class="number">100</span>% (<span class="number">52</span>/<span class="number">52</span>), 完成.</span><br><span class="line">使用 <span class="number">12</span> 个线程进行压缩</span><br><span class="line">压缩对象中: <span class="number">100</span>% (<span class="number">28</span>/<span class="number">28</span>), 完成.</span><br><span class="line">写入对象中: <span class="number">100</span>% (<span class="number">32</span><span class="regexp">/32), 16.54 KiB | 5.51 MiB/</span>s, 完成.</span><br><span class="line">总共 <span class="number">32</span>（差异 <span class="number">15</span>），复用 <span class="number">0</span>（差异 <span class="number">0</span>），包复用 <span class="number">0</span></span><br><span class="line"><span class="attr">remote:</span> Resolving <span class="attr">deltas:</span> <span class="number">100</span>% (<span class="number">15</span>/<span class="number">15</span>)</span><br><span class="line"><span class="attr">remote:</span> Processing <span class="attr">changes:</span> <span class="attr">refs:</span> <span class="number">1</span>, done    </span><br><span class="line"><span class="attr">remote:</span> commit <span class="number">4</span><span class="attr">acd093:</span> <span class="attr">ERROR:</span> missing Change-Id <span class="keyword">in</span> message footer</span><br><span class="line"><span class="attr">remote:</span> </span><br><span class="line"><span class="attr">remote:</span> <span class="attr">Hint:</span> to automatically insert a Change-Id, install the <span class="attr">hook:</span></span><br><span class="line"><span class="attr">remote:</span>   gitdir=$(git rev-parse --git-dir); scp -p -P <span class="number">29418</span> juneyang@<span class="number">172.16</span><span class="number">.12</span><span class="number">.171</span>:hooks<span class="regexp">/commit-msg $&#123;gitdir&#125;/</span>hooks/</span><br><span class="line"><span class="attr">remote:</span> and then amend the <span class="attr">commit:</span></span><br><span class="line"><span class="attr">remote:</span>   git commit --amend</span><br><span class="line"><span class="attr">remote:</span> </span><br><span class="line">To <span class="attr">ssh:</span><span class="comment">//172.16.12.171:29418/Taurus.git</span></span><br><span class="line"> ! [remote rejected]   HEAD -&gt; refs<span class="regexp">/for/</span>release_v2<span class="number">.18</span><span class="number">.0</span>%wip (commit <span class="number">4</span><span class="attr">acd093:</span> missing Change-Id <span class="keyword">in</span> message footer)</span><br><span class="line"><span class="attr">error:</span> 推送一些引用到 <span class="string">&#x27;ssh://172.16.12.171:29418/Taurus.git&#x27;</span> 失败</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首次提交流程：</p>
<ol>
<li><p>提交日志commit （ cmd + K） 这里可以用IDE来提交。后面的流程用命令。</p>
<p>正常操作即可。</p>
</li>
<li><p>hook操作</p>
<blockquote>
<p>gitdir=$(git rev-parse –git-dir); scp -p -P 29418 <a href="mailto:&#x6a;&#x75;&#x6e;&#101;&#121;&#x61;&#x6e;&#103;&#x40;&#49;&#x37;&#x32;&#x2e;&#x31;&#x36;&#x2e;&#x31;&#50;&#x2e;&#x31;&#x37;&#49;">&#x6a;&#x75;&#x6e;&#101;&#121;&#x61;&#x6e;&#103;&#x40;&#49;&#x37;&#x32;&#x2e;&#x31;&#x36;&#x2e;&#x31;&#50;&#x2e;&#x31;&#x37;&#49;</a>:hooks/commit-msg ${gitdir}/hooks/</p>
</blockquote>
</li>
<li><p>再次提交</p>
<blockquote>
<p>git commit –amend</p>
</blockquote>
</li>
<li><p>进入Vim操作中，添加日志 保存退出 <code>:wq</code> .</p>
</li>
<li><p>push 添加wip状态意味着 当次提交不会合并，在编辑中。</p>
<blockquote>
<p> git push origin HEAD:refs/for/release_v2.18.0%wip</p>
</blockquote>
</li>
</ol>
<p>Virgo:</p>
<p>git push origin HEAD:refs/for/sprint/s25</p>
<h1 id="Aries"><a href="#Aries" class="headerlink" title="Aries:"></a><strong>Aries:</strong></h1><p>git push origin HEAD:refs/for/dev</p>
<p>注意 其他项目中的提交需要单独提交。防止提交遗漏。</p>
<p>第二轮修改后提交流程：</p>
<ol>
<li><p>如果没有通过被拒绝之后，修改后再次提交</p>
<p>git add .</p>
<p>git commit –amend</p>
</li>
</ol>
<p>如果在IDE中使用commint –amend中的方法 会出现 日志修改无效的问题。</p>
<p>VirgoXX:</p>
<p>git push origin HEAD:refs/for/sprint/s25</p>
<h1 id="异常总结："><a href="#异常总结：" class="headerlink" title="异常总结："></a>异常总结：</h1><p>1.Git中vim修改权限： E45: 已设定选项 ‘readonly’ (请加 ! 强制执行)</p>
<p>初始设置进行修改操作后，无法保存，git命令行输入指令：</p>
<blockquote>
<p>:wq!</p>
</blockquote>
<p>回车即可强制修改并保存。</p>
<ol start="2">
<li>Changed_ID  必须放到下面 否则会push失败。</li>
</ol>
<h1 id="Vim操作："><a href="#Vim操作：" class="headerlink" title="Vim操作："></a>Vim操作：</h1><blockquote>
<p>保存文件退出</p>
<p> ：w  写入不退出</p>
<p> ：w！ 强制写入</p>
<p> ：wq 写入退出</p>
<p>：wq！写入强制退出</p>
<p>ZZ　写入退出，使用shift+两次ＺＺ</p>
<p>：q　　退出</p>
<p>：q！强制退出</p>
</blockquote>
<p>小结：</p>
<blockquote>
<p>‘i’进入编辑模式<br>‘esc’进入命令模式<br>‘:wq’保存退出<br>‘q!’不保存强制退出</p>
</blockquote>
<p>参考：</p>
<p>1.<a href="https://blog.csdn.net/taiyangdao/article/details/71079021">Gerrit的commit-msg hook使用指南</a></p>
<p>2.<a href="https://blog.csdn.net/QingKong999/article/details/47040047">Git使用之撤销上次提交、审核代码不通过修改再次提交</a></p>
<p>FAQ:</p>
<p><a href="https://github.com/eclipse/paho.mqtt.android/issues/212">https://github.com/eclipse/paho.mqtt.android/issues/212</a></p>
<p>如何解决冲突？</p>
<p>git reset –soft HEAD^</p>
<p>提交push命令</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git push origin <span class="attr">HEAD:</span>refs<span class="regexp">/for/</span>$&#123;branch&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.cn/post/6844903942464225294">Gerrit常见命令及最佳实践</a></p>
<p>git 提交了两个暂未入库的的问题</p>
<p>必须等前一个入库后，另一个才能操作。</p>
<p>git rebase - i 进入提交 历史修改</p>
<p>将前缀 修改为edit 或者简写为(e)</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git status   </span><br><span class="line">交互式变基操作正在进行中；至 d14af27b</span><br><span class="line">最后一条命令已完成（<span class="number">1</span> 条命令被执行）：</span><br><span class="line">   edit <span class="number">62101</span>c48 feat(VIRGO<span class="number">-719</span>):新增通过Mqtt发送系统消息指令控制设备DEBUG模式</span><br><span class="line">接下来要执行的命令（剩余 <span class="number">1</span> 条命令）：</span><br><span class="line">   pick <span class="number">53</span>ab51e6 fix(VIRGO<span class="number">-753</span>):精简 mqtt 调试日志上传</span><br><span class="line">  （使用 <span class="string">&quot;git rebase --edit-todo&quot;</span> 来查看和编辑）</span><br><span class="line">您在执行将分支 <span class="string">&#x27;sprint/s26&#x27;</span> 变基到 <span class="string">&#x27;d14af27b&#x27;</span> 的操作时编辑提交。</span><br><span class="line">  （使用 <span class="string">&quot;git commit --amend&quot;</span> 修补当前提交）</span><br><span class="line">  （当您对您的修改满意后执行 <span class="string">&quot;git rebase --continue&quot;</span>）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>git commit - amend时</p>
<p>出现正常的变基</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># 日期：  Sun Feb <span class="number">7</span> <span class="number">16</span>:<span class="number">55</span>:<span class="number">28</span> <span class="number">2021</span> +<span class="number">0800</span></span><br><span class="line">#</span><br><span class="line"># 交互式变基操作正在进行中；至 d14af27b </span><br><span class="line"># 最后一条命令已完成（<span class="number">1</span> 条命令被执行）： </span><br><span class="line">#    edit <span class="number">62101</span>c48 feat(VIRGO<span class="number">-719</span>):新增通过Mqtt发送系统消息指令控制</span><br></pre></td></tr></table></figure>

<p>操作时当前有的分支为rebase + 提交的变基点。</p>
<p>操作完成后 回到正常的状态,</p>
<p>执行</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git rebase --<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>此时的分支状态不再出现rebase字样。即正常的分支。</p>
<p>新建分支交上传远程：</p>
<blockquote>
<p>git checkout -b “分支名”</p>
<p>git push origin “分支名”</p>
</blockquote>
<p>删除远程分支 ：</p>
<blockquote>
<p>git push  origin –delete “分支名”</p>
</blockquote>
<p>删除本地分支：</p>
<blockquote>
<p>git branch -D  “分支名”</p>
</blockquote>
<p>Git 还原到某一次提交</p>
<p>175070cf47f99df8ee0a2c6c14abe70b99ec5a85</p>
<p>示例：</p>
<p>找到想要还原的某一次提交：</p>
<blockquote>
<p>git log –oneline</p>
<p>Git checkout xxxx .</p>
</blockquote>
<p>合并提交记录</p>
<p><a href="https://segmentfault.com/a/1190000023055669">https://segmentfault.com/a/1190000023055669</a></p>
<h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><p>背景：当提交代码到 review board 后未入库，别人的代码先入库，并且出现冲突，此时代码的操作。</p>
<p>代码丢失处理：</p>
<p>从 git polyGerrit 中添加代码：</p>
<blockquote>
<p>git cherry-pick</p>
<p> git fetch “ssh://<a href="mailto:&#106;&#117;&#x6e;&#101;&#121;&#x61;&#x6e;&#103;&#x40;&#49;&#55;&#x32;&#x2e;&#x31;&#54;&#46;&#x31;&#x32;&#46;&#x31;&#55;&#x31;">&#106;&#117;&#x6e;&#101;&#121;&#x61;&#x6e;&#103;&#x40;&#49;&#55;&#x32;&#x2e;&#x31;&#54;&#46;&#x31;&#x32;&#46;&#x31;&#55;&#x31;</a>:29418/Gemini” refs/changes/79/6879/1 &amp;&amp; git cherry-pick FETCH_HEAD</p>
</blockquote>
<p>git diff</p>
<p>解决冲突后</p>
<p>git add 某一个文件 如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">git add src/main/res/values/strings.xml   </span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">git cherry-pick --continue  </span><br></pre></td></tr></table></figure>

<p>最后 push</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">git push origin HEAD:refs/for/dev    </span><br></pre></td></tr></table></figure>



<p>实战：</p>
<p>第一步： git fetch xxx cherry-pick xxx</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gre4g4urqyj313e07p0up.jpg" alt="image-20210611103323886"></p>
<p>第二步：解决冲突。</p>
<p>第三步：根据提示，git add.</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gre4hqi5tmj30rp07f3zm.jpg" alt="image-20210611103456364"></p>
<p>第四步： 执行 git cherry-pick –continue时出现</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gre4itaztnj30ot0gu40f.jpg" alt="image-20210611103557871"></p>
<p>最后一步： push。</p>
<p>git push origin HEAD:refs/for/dev</p>
<p>操作完成！</p>
<h2 id="git-push-error"><a href="#git-push-error" class="headerlink" title="git push error:"></a>git push error:</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1grkbkzpnskj30ql08hdhe.jpg" alt="image-20210616191335924"></p>
<p><a href="https://stackoverflow.com/questions/11972384/git-push-remote-rejected-change-closed">https://stackoverflow.com/questions/11972384/git-push-remote-rejected-change-closed</a></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Do <span class="built_in">this</span> to fix <span class="attr">issue:</span></span><br><span class="line"></span><br><span class="line">git commit --amend</span><br><span class="line">delete change id</span><br><span class="line"></span><br><span class="line">save and quit</span><br><span class="line"><span class="keyword">new</span> change id will be added to the commit. it can be verified by git log.</span><br><span class="line">push again</span><br></pre></td></tr></table></figure>

<p>1.删除 change-id</p>
<p>Change-Id: I8b4d553b3eb0771e1a1727e9c39d9d22f80de478</p>
<ol start="2">
<li> git commit –amend</li>
</ol>
<p>之后 生成了新的 change-id</p>
<p>git 提交时 有被人插队，push 时发现 head 的指针不是指向最新的了，你需要做的就是</p>
<ol>
<li>git log 查看 commit-id</li>
<li>git reset –soft commit-id</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git reset --soft ee6b6757ace472d299f862b4292fa80da2bd1fe5</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>本地缓存 并更新  ：git stash save ui 、git  pull –rebase</p>
</li>
<li><p> 将工作区间刷新：git reset –hard f8be84627b6141d716ef84f61ef6f01e463ca8c3</p>
</li>
<li><p>最后重新提交</p>
<p>git stash pop、解决冲突、git add.  git commit 、git push……</p>
</li>
</ol>
<p>第二种方法：</p>
<ol>
<li><code>git reset --soft HEAD^</code><br>撤销上一次提交,修改的内容保留<br>如果暂存区为空，则将上一次修改放入暂存区<br>如果暂存区非空，则将不改变暂存区<br>该操作不改变工作区</li>
<li><code>git reset --hard HEAD^</code><br>工作区，暂存区，，仓库均保持为上一次提交的内容</li>
</ol>
<p>小结：</p>
<p><a href="https://www.jianshu.com/p/63199427ee68">https://www.jianshu.com/p/63199427ee68</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
